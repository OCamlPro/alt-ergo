(* PUBLIC RELEASE:
Title: Alt-Ergo takes 1 mn to solve a simple VC that CVC4 solves in 2s #3 
Source: Moy
Origin of Issue: matching modulo equality
*)

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
(forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
(forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

type qtmark

type 'a ref

logic mk_ref : 'a -> 'a ref

logic contents : 'a ref -> 'a

axiom contents_def : (forall u:'a. (contents(mk_ref(u)) = u))

axiom ref_inversion :
(forall u:'a ref [contents(u)]. (u = mk_ref(contents(u))))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function xorb(x: bool, y: bool) : bool = match_bool(y, match_bool(x, false,
true), match_bool(x, true, false))

function notb(x: bool) : bool = match_bool(x, false, true)

function implb(x: bool, y: bool) : bool = match_bool(y, true, match_bool(x,
false, true))

logic us__ignore : 'a -> unit

type us_private

logic us_null_extension : us_private

type us_type_of_heap

type us_image

axiom add_div :
(forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
(((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
(forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
(((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
(forall x:real. forall y:real. ((not (y = 0.0)) ->
(((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
(forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
(((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
(forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
(not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
(forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
(not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
(forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
(forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
(forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x < y))))

axiom bool_int__le_axiom :
(forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
(forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y < x))))

axiom bool_ge_axiom :
(forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def :
(forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic to_int : integer -> int

logic of_int : int -> integer

logic user_eq : integer, integer -> bool

axiom inversion_axiom :
(forall x:integer [to_int(x)]. (of_int(to_int(x)) = x))

logic dummy : integer

axiom range_axiom : (forall x:integer. in_range(to_int(x)))

axiom coerce_axiom :
(forall x:int [to_int(of_int(x))]. (in_range(x) ->
(to_int(of_int(x)) = x)))

logic abs : real -> real

axiom abs_def :
(forall x:real [abs(x)]. (((0.0 <= x) -> (abs(x) = x)) and
((not (0.0 <= x)) -> (abs(x) = (-x)))))

axiom Abs_le :
(forall x:real. forall y:real. ((abs(x) <= y) <-> (((-y) <= x) and
(x <= y))))

axiom Abs_pos : (forall x:real. (0.0 <= abs(x)))

axiom Abs_sum :
(forall x:real. forall y:real. (abs((x + y)) <= (abs(x) + abs(y))))

axiom Abs_prod :
(forall x:real. forall y:real. (abs((x * y)) = (abs(x) * abs(y))))

axiom triangular_inequality :
(forall x:real. forall y:real. forall z:real.
(abs((x - z)) <= (abs((x - y)) + abs((y - z)))))

logic from_int : int -> real

axiom Zero : (from_int(0) = 0.0)

axiom One : (from_int(1) = 1.0)

axiom Add :
(forall x:int. forall y:int.
(from_int((x + y)) = (from_int(x) + from_int(y))))

axiom Sub :
(forall x:int. forall y:int.
(from_int((x - y)) = (from_int(x) - from_int(y))))

axiom Mul :
(forall x:int. forall y:int.
(from_int((x * y)) = (from_int(x) * from_int(y))))

axiom Neg : (forall x:int. (from_int((-x)) = (-from_int(x))))

axiom Monotonic :
(forall x:int. forall y:int. ((x <= y) -> (from_int(x) <= from_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(from_int(i)) = i))

axiom Truncate_down_pos :
(forall x:real. ((0.0 <= x) -> ((from_int(truncate(x)) <= x) and
(x < from_int((truncate(x) + 1))))))

axiom Truncate_up_neg :
(forall x:real. ((x <= 0.0) -> ((from_int((truncate(x) - 1)) < x) and
(x <= from_int(truncate(x))))))

axiom Real_of_truncate :
(forall x:real. (((x - 1.0) <= from_int(truncate(x))) and
(from_int(truncate(x)) <= (x + 1.0))))

axiom Truncate_monotonic :
(forall x:real. forall y:real. ((x <= y) -> (truncate(x) <= truncate(y))))

axiom Truncate_monotonic_int1 :
(forall x:real. forall i:int. ((x <= from_int(i)) -> (truncate(x) <= i)))

axiom Truncate_monotonic_int2 :
(forall x:real. forall i:int. ((from_int(i) <= x) -> (i <= truncate(x))))

logic floor : real -> int

logic ceil : real -> int

axiom Floor_int : (forall i:int. (floor(from_int(i)) = i))

axiom Ceil_int : (forall i:int. (ceil(from_int(i)) = i))

axiom Floor_down :
(forall x:real. ((from_int(floor(x)) <= x) and
(x < from_int((floor(x) + 1)))))

axiom Ceil_up :
(forall x:real. ((from_int((ceil(x) - 1)) < x) and
(x <= from_int(ceil(x)))))

axiom Floor_monotonic :
(forall x:real. forall y:real. ((x <= y) -> (floor(x) <= floor(y))))

axiom Ceil_monotonic :
(forall x:real. forall y:real. ((x <= y) -> (ceil(x) <= ceil(y))))

logic power : real, int -> real

axiom Power_0 : (forall x:real. (power(x, 0) = 1.0))

axiom Power_s :
(forall x:real. forall n:int. ((0 <= n) -> (power(x,
(n + 1)) = (x * power(x, n)))))

axiom Power_s_alt :
(forall x:real. forall n:int. ((0 < n) -> (power(x, n) = (x * power(x,
(n - 1))))))

axiom Power_1 : (forall x:real. (power(x, 1) = x))

axiom Power_sum :
(forall x:real. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
(power(x, (n + m)) = (power(x, n) * power(x, m))))))

axiom Power_mult :
(forall x:real. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
(power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
(forall x:real. forall y:real. forall n:int. ((0 <= n) -> (power((x * y),
n) = (power(x, n) * power(y, n)))))

axiom Pow_ge_one :
(forall x:real. forall n:int. (((0 <= n) and (1.0 <= x)) ->
(1.0 <= power(x, n))))

logic min : real, real -> real

logic max : real, real -> real

axiom Max_is_ge :
(forall x:real. forall y:real. ((x <= max(x, y)) and (y <= max(x, y))))

axiom Max_is_some :
(forall x:real. forall y:real. ((max(x, y) = x) or (max(x, y) = y)))

axiom Min_is_le :
(forall x:real. forall y:real. ((min(x, y) <= x) and (min(x, y) <= y)))

axiom Min_is_some :
(forall x:real. forall y:real. ((min(x, y) = x) or (min(x, y) = y)))

type mode = NearestTiesToEven | ToZero | Up | Down | NearestTiesToAway

logic match_mode1 : mode, 'a, 'a, 'a, 'a, 'a -> 'a

axiom match_mode_NearestTiesToEven1 :
(forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
(match_mode1(NearestTiesToEven, z, z1, z2, z3, z4) = z))

axiom match_mode_ToZero1 :
(forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
(match_mode1(ToZero, z, z1, z2, z3, z4) = z1))

axiom match_mode_Up1 :
(forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
(match_mode1(Up, z, z1, z2, z3, z4) = z2))

axiom match_mode_Down1 :
(forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
(match_mode1(Down, z, z1, z2, z3, z4) = z3))

axiom match_mode_NearestTiesToAway1 :
(forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
(match_mode1(NearestTiesToAway, z, z1, z2, z3, z4) = z4))

type single

logic round : mode, real -> real

logic value : single -> real

logic exact : single -> real

logic model : single -> real

function round_error(x: single) : real = abs((value(x) - exact(x)))

function total_error(x: single) : real = abs((value(x) - model(x)))

predicate no_overflow(m: mode, x: real) = (abs(round(m,
x)) <= from_int(340282346638528859811704183484516925440))

axiom Bounded_real_no_overflow :
(forall m:mode. forall x:real.
((abs(x) <= from_int(340282346638528859811704183484516925440)) ->
(abs(round(m, x)) <= from_int(340282346638528859811704183484516925440))))

axiom Round_monotonic :
(forall m:mode. forall x:real. forall y:real. ((x <= y) -> (round(m,
x) <= round(m, y))))

axiom Round_idempotent :
(forall m1:mode. forall m2:mode. forall x:real. (round(m1, round(m2,
x)) = round(m2, x)))

axiom Round_value :
(forall m:mode. forall x:single. (round(m, value(x)) = value(x)))

axiom Bounded_value :
(forall x:single.
(abs(value(x)) <= from_int(340282346638528859811704183484516925440)))

axiom Exact_rounding_for_integers :
(forall m:mode. forall i:int. ((((-16777216) <= i) and (i <= 16777216)) ->
(round(m, from_int(i)) = from_int(i))))

axiom Round_down_le : (forall x:real. (round(Down, x) <= x))

axiom Round_up_ge : (forall x:real. (x <= round(Up, x)))

axiom Round_down_neg : (forall x:real. (round(Down, (-x)) = (-round(Up, x))))

axiom Round_up_neg : (forall x:real. (round(Up, (-x)) = (-round(Down, x))))

logic round_logic : mode, real -> single

axiom Round_logic_def :
(forall m:mode. forall x:real. ((abs(round(m,
x)) <= from_int(340282346638528859811704183484516925440)) ->
(value(round_logic(m, x)) = round(m, x))))

predicate of_real_post(m: mode, x: real, res: single) =
((value(res) = round(m, x)) and ((exact(res) = x) and (model(res) = x)))

predicate add_post(m: mode, x: single, y: single, res: single) =
((value(res) = round(m, (value(x) + value(y)))) and
((exact(res) = (exact(x) + exact(y))) and
(model(res) = (model(x) + model(y)))))

predicate sub_post(m: mode, x: single, y: single, res: single) =
((value(res) = round(m, (value(x) - value(y)))) and
((exact(res) = (exact(x) - exact(y))) and
(model(res) = (model(x) - model(y)))))

predicate mul_post(m: mode, x: single, y: single, res: single) =
((value(res) = round(m, (value(x) * value(y)))) and
((exact(res) = (exact(x) * exact(y))) and
(model(res) = (model(x) * model(y)))))

predicate div_post(m: mode, x: single, y: single, res: single) =
((value(res) = round(m, (value(x) / value(y)))) and
((exact(res) = (exact(x) / exact(y))) and
(model(res) = (model(x) / model(y)))))

predicate neg_post(x: single, res: single) = ((value(res) = (-value(x))) and
((exact(res) = (-exact(x))) and (model(res) = (-model(x)))))

predicate lt(x: single, y: single) = (value(x) < value(y))

predicate gt(x: single, y: single) = (value(y) < value(x))

type double

logic round1 : mode, real -> real

logic value1 : double -> real

logic exact1 : double -> real

logic model1 : double -> real

function round_error1(x: double) : real = abs((value1(x) - exact1(x)))

function total_error1(x: double) : real = abs((value1(x) - model1(x)))

predicate no_overflow1(m: mode, x: real) = (abs(round1(m,
x)) <= from_int(179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368))

axiom Bounded_real_no_overflow1 :
(forall m:mode. forall x:real.
((abs(x) <= from_int(179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368)) ->
(abs(round1(m,
x)) <= from_int(179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368))))

axiom Round_monotonic1 :
(forall m:mode. forall x:real. forall y:real. ((x <= y) -> (round1(m,
x) <= round1(m, y))))

axiom Round_idempotent1 :
(forall m1:mode. forall m2:mode. forall x:real. (round1(m1, round1(m2,
x)) = round1(m2, x)))

axiom Round_value1 :
(forall m:mode. forall x:double. (round1(m, value1(x)) = value1(x)))

axiom Bounded_value1 :
(forall x:double.
(abs(value1(x)) <= from_int(179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368)))

axiom Exact_rounding_for_integers1 :
(forall m:mode. forall i:int. ((((-9007199254740992) <= i) and
(i <= 9007199254740992)) -> (round1(m, from_int(i)) = from_int(i))))

axiom Round_down_le1 : (forall x:real. (round1(Down, x) <= x))

axiom Round_up_ge1 : (forall x:real. (x <= round1(Up, x)))

axiom Round_down_neg1 :
(forall x:real. (round1(Down, (-x)) = (-round1(Up, x))))

axiom Round_up_neg1 :
(forall x:real. (round1(Up, (-x)) = (-round1(Down, x))))

logic round_logic1 : mode, real -> double

axiom Round_logic_def1 :
(forall m:mode. forall x:real. ((abs(round1(m,
x)) <= from_int(179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368)) ->
(value1(round_logic1(m, x)) = round1(m, x))))

predicate of_real_post1(m: mode, x: real, res: double) =
((value1(res) = round1(m, x)) and ((exact1(res) = x) and
(model1(res) = x)))

predicate add_post1(m: mode, x: double, y: double, res: double) =
((value1(res) = round1(m, (value1(x) + value1(y)))) and
((exact1(res) = (exact1(x) + exact1(y))) and
(model1(res) = (model1(x) + model1(y)))))

predicate sub_post1(m: mode, x: double, y: double, res: double) =
((value1(res) = round1(m, (value1(x) - value1(y)))) and
((exact1(res) = (exact1(x) - exact1(y))) and
(model1(res) = (model1(x) - model1(y)))))

predicate mul_post1(m: mode, x: double, y: double, res: double) =
((value1(res) = round1(m, (value1(x) * value1(y)))) and
((exact1(res) = (exact1(x) * exact1(y))) and
(model1(res) = (model1(x) * model1(y)))))

predicate div_post1(m: mode, x: double, y: double, res: double) =
((value1(res) = round1(m, (value1(x) / value1(y)))) and
((exact1(res) = (exact1(x) / exact1(y))) and
(model1(res) = (model1(x) / model1(y)))))

predicate neg_post1(x: double, res: double) =
((value1(res) = (-value1(x))) and ((exact1(res) = (-exact1(x))) and
(model1(res) = (-model1(x)))))

predicate lt1(x: double, y: double) = (value1(x) < value1(y))

predicate gt1(x: double, y: double) = (value1(y) < value1(x))

axiom round_single_bound :
(forall x:real [round(NearestTiesToEven, x)].
((((x - (0x1.p-24 * abs(x))) - 0x1.p-150) <= round(NearestTiesToEven,
x)) and (round(NearestTiesToEven,
x) <= ((x + (0x1.p-24 * abs(x))) + 0x1.p-150))))

axiom round_double_bound :
(forall x:real [round1(NearestTiesToEven, x)].
((((x - (0x1.p-53 * abs(x))) - 0x1.p-1075) <= round(NearestTiesToEven,
x)) and (round(NearestTiesToEven,
x) <= ((x + (0x1.p-53 * abs(x))) + 0x1.p-1075))))

logic bool_lt1 : real, real -> bool

logic bool_le1 : real, real -> bool

logic bool_gt1 : real, real -> bool

logic bool_ge1 : real, real -> bool

logic bool_eq1 : real, real -> bool

logic bool_neq : real, real -> bool

axiom Bool_real__lt_axiom :
(forall x:real. (forall y:real. ((bool_lt1(x, y) = true) <-> (x < y))))

axiom Bool_real__le_axiom :
(forall x:real. (forall y:real. ((bool_le1(x, y) = true) <-> (x <= y))))

axiom Bool_real__gt_axiom :
(forall x:real. (forall y:real. ((bool_gt1(x, y) = true) <-> (y < x))))

axiom Bool_real__ge_axiom :
(forall x:real. (forall y:real. ((bool_ge1(x, y) = true) <-> (y <= x))))

axiom Bool_real__eq_axiom :
(forall x:real. (forall y:real. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom Bool_real__neq_axiom :
(forall x:real.
(forall y:real. ((bool_neq(x, y) = true) <-> (not (x = y)))))

logic round2 : real -> int

axiom Round_down :
(forall x:real. (((x - from_int(floor(x))) < 0.5) ->
(round2(x) = floor(x))))

axiom Round_up :
(forall x:real. (((from_int(ceil(x)) - x) < 0.5) ->
(round2(x) = ceil(x))))

axiom Round_neg_tie :
(forall x:real. ((((x - from_int(floor(x))) = 0.5) and (x < 0.0)) ->
(round2(x) = floor(x))))

axiom Round_pos_tie :
(forall x:real. ((((from_int(ceil(x)) - x) = 0.5) and (0.0 < x)) ->
(round2(x) = ceil(x))))

axiom Round_int :
(forall i:int [round2(from_int(i))]. (round2(from_int(i)) = i))

axiom Round_near_int :
(forall i:int.
(forall x:real. ((((-0.5) < x) and (x < 0.5)) ->
(round2((from_int(i) + x)) = i))))

axiom Round_monotonic2 :
(forall x:real. forall y:real. ((x <= y) -> (round2(x) <= round2(y))))

axiom Round_monotonic_int1 :
(forall x:real. forall i:int. ((x <= from_int(i)) -> (round2(x) <= i)))

axiom Round_monotonic_int2 :
(forall x:real. forall i:int. ((from_int(i) <= x) -> (i <= round2(x))))

axiom Round_bound :
(forall x:real. (((x - 0.5) <= from_int(round2(x))) and
(from_int(round2(x)) <= (x + 0.5))))

type float

predicate in_range1(x: real) =
(((-from_int(340282346638528859811704183484516925440)) <= x) and
(x <= from_int(340282346638528859811704183484516925440)))

logic bool_eq3 : real, real -> bool

axiom bool_eq_def1 :
(forall x:real. forall y:real [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic to_real : float -> real

logic of_real : real -> float

logic user_eq1 : float, float -> bool

axiom inversion_axiom1 :
(forall x:float [to_real(x)]. (of_real(to_real(x)) = x))

logic next_representable : real -> real

logic prev_representable : real -> real

axiom next_representable_def :
(forall x:real [next_representable(x)]. (x < next_representable(x)))

axiom prev_representable_def :
(forall x:real [prev_representable(x)]. (prev_representable(x) < x))

logic attr__ATTRIBUTE_IMAGE1 : real -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> real

logic dummy1 : float

axiom representable_first : (round(NearestTiesToEven,
(-from_int(340282346638528859811704183484516925440))) = (-from_int(340282346638528859811704183484516925440)))

axiom representable_last : (round(NearestTiesToEven,
from_int(340282346638528859811704183484516925440)) = from_int(340282346638528859811704183484516925440))

axiom range_axiom1 : (forall x:float. in_range1(to_real(x)))

type e

predicate in_range2(x: int) = ((0 <= x) and (x <= 3))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic to_int1 : e -> int

logic of_int1 : int -> e

logic user_eq2 : e, e -> bool

axiom inversion_axiom2 : (forall x:e [to_int1(x)]. (of_int1(to_int1(x)) = x))

logic dummy2 : e

axiom range_axiom2 : (forall x:e. in_range2(to_int1(x)))

axiom coerce_axiom1 :
(forall x:int [to_int1(of_int1(x))]. (in_range2(x) ->
(to_int1(of_int1(x)) = x)))

type t

logic mk_t : e, bool, integer, float, int, us_private -> t

logic rec__discr : t -> e

axiom rec__discr_def2 :
(forall u:e. forall u1:bool. forall u3:integer. forall u4:float.
forall u5:int. forall u6:us_private. (rec__discr(mk_t(u, u1, u3, u4, u5,
u6)) = u))

logic rec__z : t -> bool

axiom rec__z_def2 :
(forall u:e. forall u1:bool. forall u3:integer. forall u4:float.
forall u5:int. forall u6:us_private. (rec__z(mk_t(u, u1, u3, u4, u5,
u6)) = u1))

logic rec__x : t -> integer

axiom rec__x_def2 :
(forall u:e. forall u1:bool. forall u3:integer. forall u4:float.
forall u5:int. forall u6:us_private. (rec__x(mk_t(u, u1, u3, u4, u5,
u6)) = u3))

logic rec__y : t -> float

axiom rec__y_def2 :
(forall u:e. forall u1:bool. forall u3:integer. forall u4:float.
forall u5:int. forall u6:us_private. (rec__y(mk_t(u, u1, u3, u4, u5,
u6)) = u4))

logic attr__tag : t -> int

axiom attr__tag_def2 :
(forall u:e. forall u1:bool. forall u3:integer. forall u4:float.
forall u5:int. forall u6:us_private. (attr__tag(mk_t(u, u1, u3, u4, u5,
u6)) = u5))

logic rec__ext__ : t -> us_private

axiom rec__ext___def2 :
(forall u:e. forall u1:bool. forall u3:integer. forall u4:float.
forall u5:int. forall u6:us_private. (rec__ext__(mk_t(u, u1, u3, u4, u5,
u6)) = u6))

axiom t_inversion1 :
(forall u:t [rec__discr(u)| rec__z(u)| rec__x(u)| rec__y(u)| attr__tag(u)|
rec__ext__(u)]. (u = mk_t(rec__discr(u), rec__z(u), rec__x(u), rec__y(u),
attr__tag(u), rec__ext__(u))))

predicate x__pred(a: t) = ((to_int1(rec__discr(a)) = 0) or
(to_int1(rec__discr(a)) = 2))

predicate y__pred(a: t) = (not ((to_int1(rec__discr(a)) = 0) or
(to_int1(rec__discr(a)) = 2)))

logic bool_eq4 : t, t -> bool

axiom bool_eq_def2 :
(forall a:t. forall b:t [bool_eq4(a, b)].
((((((to_int1(rec__discr(a)) = to_int1(rec__discr(b))) and
(rec__z(a) = rec__z(b))) and (x__pred(a) ->
(to_int(rec__x(a)) = to_int(rec__x(b))))) and (y__pred(a) ->
(to_real(rec__y(a)) = to_real(rec__y(b))))) -> (bool_eq4(a, b) = true)) and
((not ((((to_int1(rec__discr(a)) = to_int1(rec__discr(b))) and
(rec__z(a) = rec__z(b))) and (x__pred(a) ->
(to_int(rec__x(a)) = to_int(rec__x(b))))) and (y__pred(a) ->
(to_real(rec__y(a)) = to_real(rec__y(b)))))) -> (bool_eq4(a, b) = false))))

logic user_eq3 : t, t -> bool

logic dummy18 : e

logic dummy19 : bool

logic dummy20 : integer

logic dummy21 : float

logic dummy22 : int

logic dummy23 : us_private

logic is_zero : t -> bool

type u2

logic mk_u2 : e, bool, integer, float, integer, integer, float, int,
us_private -> u2

logic rec__discr1 : u2 -> e

axiom rec__discr_def3 :
(forall u:e. forall u1:bool. forall u3:integer. forall u4:float.
forall u5:integer. forall u6:integer. forall u7:float. forall u8:int.
forall u9:us_private. (rec__discr1(mk_u2(u, u1, u3, u4, u5, u6, u7, u8,
u9)) = u))

logic rec__z1 : u2 -> bool

axiom rec__z_def3 :
(forall u:e. forall u1:bool. forall u3:integer. forall u4:float.
forall u5:integer. forall u6:integer. forall u7:float. forall u8:int.
forall u9:us_private. (rec__z1(mk_u2(u, u1, u3, u4, u5, u6, u7, u8,
u9)) = u1))

logic rec__x1 : u2 -> integer

axiom rec__x_def3 :
(forall u:e. forall u1:bool. forall u3:integer. forall u4:float.
forall u5:integer. forall u6:integer. forall u7:float. forall u8:int.
forall u9:us_private. (rec__x1(mk_u2(u, u1, u3, u4, u5, u6, u7, u8,
u9)) = u3))

logic rec__y1 : u2 -> float

axiom rec__y_def3 :
(forall u:e. forall u1:bool. forall u3:integer. forall u4:float.
forall u5:integer. forall u6:integer. forall u7:float. forall u8:int.
forall u9:us_private. (rec__y1(mk_u2(u, u1, u3, u4, u5, u6, u7, u8,
u9)) = u4))

logic rec__w : u2 -> integer

axiom rec__w_def1 :
(forall u:e. forall u1:bool. forall u3:integer. forall u4:float.
forall u5:integer. forall u6:integer. forall u7:float. forall u8:int.
forall u9:us_private. (rec__w(mk_u2(u, u1, u3, u4, u5, u6, u7, u8,
u9)) = u5))

logic rec__xx : u2 -> integer

axiom rec__xx_def1 :
(forall u:e. forall u1:bool. forall u3:integer. forall u4:float.
forall u5:integer. forall u6:integer. forall u7:float. forall u8:int.
forall u9:us_private. (rec__xx(mk_u2(u, u1, u3, u4, u5, u6, u7, u8,
u9)) = u6))

logic rec__yy : u2 -> float

axiom rec__yy_def1 :
(forall u:e. forall u1:bool. forall u3:integer. forall u4:float.
forall u5:integer. forall u6:integer. forall u7:float. forall u8:int.
forall u9:us_private. (rec__yy(mk_u2(u, u1, u3, u4, u5, u6, u7, u8,
u9)) = u7))

logic attr__tag1 : u2 -> int

axiom attr__tag_def3 :
(forall u:e. forall u1:bool. forall u3:integer. forall u4:float.
forall u5:integer. forall u6:integer. forall u7:float. forall u8:int.
forall u9:us_private. (attr__tag1(mk_u2(u, u1, u3, u4, u5, u6, u7, u8,
u9)) = u8))

logic rec__ext__1 : u2 -> us_private

axiom rec__ext___def3 :
(forall u:e. forall u1:bool. forall u3:integer. forall u4:float.
forall u5:integer. forall u6:integer. forall u7:float. forall u8:int.
forall u9:us_private. (rec__ext__1(mk_u2(u, u1, u3, u4, u5, u6, u7, u8,
u9)) = u9))

axiom u2_inversion1 :
(forall u:u2 [rec__discr1(u)| rec__z1(u)| rec__x1(u)| rec__y1(u)|
rec__w(u)| rec__xx(u)| rec__yy(u)| attr__tag1(u)| rec__ext__1(u)].
(u = mk_u2(rec__discr1(u), rec__z1(u), rec__x1(u), rec__y1(u), rec__w(u),
rec__xx(u), rec__yy(u), attr__tag1(u), rec__ext__1(u))))

logic extract__w : us_private -> integer

logic extract__xx : us_private -> integer

logic extract__yy : us_private -> float

logic extract__ext__ : us_private -> us_private

logic hide_ext__ : integer, integer, float, us_private -> us_private

function to_base(a: u2) : t = mk_t(rec__discr1(a), rec__z1(a), rec__x1(a),
rec__y1(a), attr__tag1(a), hide_ext__(rec__w(a), rec__xx(a), rec__yy(a),
rec__ext__1(a)))

function of_base(a: t) : u2 = mk_u2(rec__discr(a), rec__z(a), rec__x(a),
rec__y(a), extract__w(rec__ext__(a)), extract__xx(rec__ext__(a)),
extract__yy(rec__ext__(a)), attr__tag(a), extract__ext__(rec__ext__(a)))

predicate x__pred1(a: u2) = ((to_int1(rec__discr1(a)) = 0) or
(to_int1(rec__discr1(a)) = 2))

predicate y__pred1(a: u2) = (not ((to_int1(rec__discr1(a)) = 0) or
(to_int1(rec__discr1(a)) = 2)))

predicate xx__pred(a: u2) = ((to_int1(rec__discr1(a)) = 0) or
(to_int1(rec__discr1(a)) = 2))

predicate yy__pred(a: u2) = (not ((to_int1(rec__discr1(a)) = 0) or
(to_int1(rec__discr1(a)) = 2)))

logic bool_eq5 : u2, u2 -> bool

axiom bool_eq_def3 :
(forall a:u2. forall b:u2 [bool_eq5(a, b)].
(((((((((to_int1(rec__discr1(a)) = to_int1(rec__discr1(b))) and
(rec__z1(a) = rec__z1(b))) and (x__pred1(a) ->
(to_int(rec__x1(a)) = to_int(rec__x1(b))))) and (y__pred1(a) ->
(to_real(rec__y1(a)) = to_real(rec__y1(b))))) and
(to_int(rec__w(a)) = to_int(rec__w(b)))) and (xx__pred(a) ->
(to_int(rec__xx(a)) = to_int(rec__xx(b))))) and (yy__pred(a) ->
(to_real(rec__yy(a)) = to_real(rec__yy(b))))) -> (bool_eq5(a,
b) = true)) and
((not (((((((to_int1(rec__discr1(a)) = to_int1(rec__discr1(b))) and
(rec__z1(a) = rec__z1(b))) and (x__pred1(a) ->
(to_int(rec__x1(a)) = to_int(rec__x1(b))))) and (y__pred1(a) ->
(to_real(rec__y1(a)) = to_real(rec__y1(b))))) and
(to_int(rec__w(a)) = to_int(rec__w(b)))) and (xx__pred(a) ->
(to_int(rec__xx(a)) = to_int(rec__xx(b))))) and (yy__pred(a) ->
(to_real(rec__yy(a)) = to_real(rec__yy(b)))))) -> (bool_eq5(a,
b) = false))))

logic user_eq4 : u2, u2 -> bool

logic dummy24 : e

logic dummy25 : bool

logic dummy26 : integer

logic dummy27 : float

logic dummy28 : integer

logic dummy29 : integer

logic dummy30 : float

logic dummy31 : int

logic dummy32 : us_private

logic is_zero__3 : u2 -> bool

axiom is_zero__3__def_axiom :
(forall v9:e. forall v10:bool. forall v11:integer. forall v12:float.
forall v13:integer. forall v14:integer. forall v15:float. forall v16:int.
forall v17:us_private [is_zero__3(mk_u2(v9, v10, v11, v12, v13, v14, v15,
v16, v17))]. (((is_zero__3(mk_u2(v9, v10, v11, v12, v13, v14, v15, v16,
v17)) = true) -> (((is_zero(mk_t(v9, v10, v11, v12, v16, hide_ext__(v13,
v14, v15, v17))) = true) and (to_int(v13) = 0)) and ((((to_int1(v9) = 0) or
(to_int1(v9) = 2)) -> (to_int(v14) = 0)) and ((not ((to_int1(v9) = 0) or
(to_int1(v9) = 2))) -> (to_real(v15) = 0.0e-1))))) and ((((is_zero(mk_t(v9,
v10, v11, v12, v16, hide_ext__(v13, v14, v15, v17))) = true) and
(to_int(v13) = 0)) and ((((to_int1(v9) = 0) or (to_int1(v9) = 2)) and
(to_int(v14) = 0)) or ((not ((to_int1(v9) = 0) or (to_int1(v9) = 2))) and
(to_real(v15) = 0.0e-1)))) -> (is_zero__3(mk_u2(v9, v10, v11, v12, v13,
v14, v15, v16, v17)) = true))))

axiom is_zero__def_axiom :
(forall v9:e. forall v10:bool. forall v11:integer. forall v12:float.
forall v13:int. forall v14:us_private [is_zero(mk_t(v9, v10, v11, v12, v13,
v14))]. (((is_zero(mk_t(v9, v10, v11, v12, v13, v14)) = true) ->
((not (v10 = true)) and ((((to_int1(v9) = 0) or (to_int1(v9) = 2)) ->
(to_int(v11) = 0)) and ((not ((to_int1(v9) = 0) or (to_int1(v9) = 2))) ->
(to_real(v12) = 0.0e-1))))) and (((not (v10 = true)) and
((((to_int1(v9) = 0) or (to_int1(v9) = 2)) and (to_int(v11) = 0)) or
((not ((to_int1(v9) = 0) or (to_int1(v9) = 2))) and
(to_real(v12) = 0.0e-1)))) -> (is_zero(mk_t(v9, v10, v11, v12, v13,
v14)) = true))))

axiom real_const_axiom15 : (0.0 = from_int(0))

axiom real_const_axiom16 :
(179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0 = from_int(179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368))

axiom real_const_axiom17 :
(340282346638528859811704183484516925440.0 = from_int(340282346638528859811704183484516925440))

(* File "/Users/moy/spark2014/testsuite/gnatprove/temp/tmp-test-N709-001__tagged_discr-50033/src/gnatprove/tagged_discr/../tagged_discr.mlw", line 2251, characters 5-8 *)
goal WP_parameter_def1 :
(forall o:integer. forall o1:e. forall o2:bool. forall o3:integer.
forall o4:float. forall o5:integer. forall o6:integer. forall o7:float.
forall o8:int. forall o9:us_private. forall o10:integer. forall o11:e.
forall o12:bool. forall o13:integer. forall o14:float. forall o15:integer.
forall o16:integer. forall o17:float. forall o18:int.
forall o19:us_private. forall o20:float. forall o21:e. forall o22:bool.
forall o23:integer. forall o24:float. forall o25:integer.
forall o26:integer. forall o27:float. forall o28:int.
forall o29:us_private. forall tagged_discr__update__v:e.
forall tagged_discr__update__v1:bool.
forall tagged_discr__update__v2:integer.
forall tagged_discr__update__v3:float. forall tagged_discr__update__v4:int.
forall tagged_discr__update__v5:us_private. forall v9:e. forall v10:bool.
forall v11:integer. forall v12:float. forall v13:integer.
forall v14:integer. forall v15:float. forall v16:int.
forall v17:us_private. forall v18:e. forall v19:bool. forall v20:integer.
forall v21:float. forall v22:integer. forall v23:integer. forall v24:float.
forall v25:int. forall v26:us_private. forall result:bool. forall v27:e.
forall v28:bool. forall v29:integer. forall v30:float. forall v31:integer.
forall v32:integer. forall v33:float. forall v34:int.
forall v35:us_private. forall v36:e. forall v37:bool. forall v38:integer.
forall v39:float. forall v40:integer. forall v41:integer. forall v42:float.
forall v43:int. forall v44:us_private. forall v45:e. forall v46:bool.
forall v47:integer. forall v48:float. forall v49:integer.
forall v50:integer. forall v51:float. forall v52:int.
forall v53:us_private. forall v54:e. forall v55:bool. forall v56:integer.
forall v57:float. forall v58:integer. forall v59:integer. forall v60:float.
forall v61:int. forall v62:us_private.
(((((is_zero(mk_t(tagged_discr__update__v, tagged_discr__update__v1,
tagged_discr__update__v2, tagged_discr__update__v3,
tagged_discr__update__v4, tagged_discr__update__v5)) = true) and (mk_u2(v9,
v10, v11, v12, v13, v14, v15, v16,
v17) = of_base(mk_t(tagged_discr__update__v, tagged_discr__update__v1,
tagged_discr__update__v2, tagged_discr__update__v3,
tagged_discr__update__v4, tagged_discr__update__v5)))) and
((((to_int(o) = 0) and ((v9 = o1) and ((v10 = o2) and ((v11 = o3) and
((v12 = o4) and ((o = o5) and ((v14 = o6) and ((v15 = o7) and
((v16 = o8) and (v17 = o9)))))))))) and (mk_u2(v18, v19, v20, v21, v22,
v23, v24, v25, v26) = mk_u2(o1, o2, o3, o4, o5, o6, o7, o8, o9))) and
((((to_int1(v18) = 0) and (result = true)) or ((not (to_int1(v18) = 0)) and
(((to_int1(v18) = 2) and (result = true)) or ((not (to_int1(v18) = 2)) and
(result = false))))) and (((result = true) and (((to_int(o10) = 0) and
((v18 = o11) and ((v19 = o12) and ((v20 = o13) and ((v21 = o14) and
((v22 = o15) and ((o10 = o16) and ((v24 = o17) and ((v25 = o18) and
(v26 = o19)))))))))) and ((o11 = v27) and ((o12 = v28) and ((o13 = v29) and
((o14 = v30) and ((o15 = v31) and ((o16 = v32) and ((o17 = v33) and
((o18 = v34) and (o19 = v35))))))))))) or ((not (result = true)) and
((((to_real(o20) = 0.0e-1) and ((v18 = o21) and ((v19 = o22) and
((v20 = o23) and ((v21 = o24) and ((v22 = o25) and ((v23 = o26) and
((o20 = o27) and ((v25 = o28) and (v26 = o29)))))))))) and ((o21 = v36) and
((o22 = v37) and ((o23 = v38) and ((o24 = v39) and ((o25 = v40) and
((o26 = v41) and ((o27 = v42) and ((o28 = v43) and (o29 = v44)))))))))) and
(mk_u2(v27, v28, v29, v30, v31, v32, v33, v34, v35) = mk_u2(v36, v37, v38,
v39, v40, v41, v42, v43, v44)))))))) and (((v45 = v27) and ((v46 = v28) and
((v47 = v29) and ((v48 = v30) and ((v49 = v31) and ((v50 = v32) and
((v51 = v33) and ((v52 = v34) and (v53 = v35))))))))) and ((v54 = v27) and
((v55 = v28) and ((v56 = v29) and ((v57 = v30) and ((v58 = v31) and
((v59 = v32) and ((v60 = v33) and ((v61 = v34) and (v62 = v35))))))))))) ->
(is_zero__3(mk_u2(v45, v46, v47, v48, v49, v50, v51, v52, v53)) = true)))