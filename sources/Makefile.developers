COMMIT_ID = $(shell git log -1 | grep commit | cut -d " " -f 2)

edit: 
	emacs lib/*/*ml* tools/text/*.ml* tools/gui/*.ml* parsers/*/*.ml* plugins/*/*.ml* &

# Modules Architecture
###############################################################################

poor-archi: .depend
	cat .depend | ocamldot | dot -Tpdf > poor-archi.pdf

rich-archi:opt gui
	ocamldoc.opt $(INCLUDES) -dot -dot-reduce -dot-include-all lib/util/*.ml lib/structures/*.ml lib/reasoners/*.ml lib/frontend/*.ml tools/text/*.ml tools/gui/*.ml \
        parsers/why/*.ml parsers/smt2/*.ml lib/util/*.mli lib/structures/*.mli lib/reasoners/*.mli lib/frontend/*.mli tools/text/*.mli tools/gui/*.mli parsers/why/*.mli parsers/smt2/*.mli -verbose
	grep -v "}" ocamldoc.out > archi.dot
	rm ocamldoc.out
	cat ../extra/subgraphs.dot >> archi.dot
	echo "}" >> archi.dot
	dot -Tpdf archi.dot > archi.pdf

archi:$(NAME).byte $(GUINAME).byte
	ocamldoc.opt $(INCLUDES) -dot -dot-reduce lib/util/*.ml lib/structures/*.ml lib/reasoners/*.ml lib/frontend/*.ml tools/text/*.ml tools/gui/*.ml \
        parsers/why/*.ml parsers/smt2/*.ml lib/util/*.mli lib/structures/*.mli lib/reasoners/*.mli lib/frontend/*.mli tools/text/*.mli tools/gui/*.mli parsers/why/*.mli parsers/smt2/*.mli -verbose
	grep -v "}" ocamldoc.out > archi.dot
	rm ocamldoc.out
	cat ../extra/subgraphs.dot >> archi.dot
	echo "}" >> archi.dot
	dot -Tpdf archi.dot > archi.pdf
	evince archi.pdf 2> /dev/null > /dev/null &

# try-alt-ergo
##########################################################################################

try-alt-ergo:
	make clean
	cp -rf ../alt-ergo ../try-alt-ergo/
	cp -rf ../try-alt-ergo/extra/Makefile ../try-alt-ergo/alt-ergo/
	cp -rf ../try-alt-ergo/extra/Makefile.js ../try-alt-ergo/alt-ergo/
	cp -rf ../try-alt-ergo/lib-num ../try-alt-ergo/alt-ergo/
	cp -rf ../try-alt-ergo/js ../try-alt-ergo/alt-ergo/
	cp -rf ../try-alt-ergo/extra/src__main__main_js.ml ../try-alt-ergo/alt-ergo/tools/javascript/main_js.ml
	cp -rf ../try-alt-ergo/extra/src__util__myUnix.ml ../try-alt-ergo/alt-ergo/lib/util/myUnix.ml
	cp -rf ../try-alt-ergo/extra/src__util__numbers.ml ../try-alt-ergo/alt-ergo/lib/util/numbers.ml
	cp -rf ../try-alt-ergo/extra/src__util__myZip.ml ../try-alt-ergo/alt-ergo/lib/util/myZip.ml
	make depend -C ../try-alt-ergo/alt-ergo
	make byte -C ../try-alt-ergo/alt-ergo
	make try -C ../try-alt-ergo/alt-ergo
	cp ../try-alt-ergo/alt-ergo/try-alt-ergo.js ../try-alt-ergo/html-interface/try-alt-ergo/alt-ergo.js
	firefox ../try-alt-ergo/html-interface/try.html


try-alt-ergo-mini:
	make clean
	cp -rf ../alt-ergo ../try-alt-ergo/
	cp -rf ../try-alt-ergo/extra/Makefile ../try-alt-ergo/alt-ergo/
	cp -rf ../try-alt-ergo/extra/Makefile.js ../try-alt-ergo/alt-ergo/
	cp -rf ../try-alt-ergo/lib-num ../try-alt-ergo/alt-ergo/
	cp -rf ../try-alt-ergo/js ../try-alt-ergo/alt-ergo/
	cp -rf ../try-alt-ergo/extra/src__main__main_js_mini.ml ../try-alt-ergo/alt-ergo/tools/javascript/main_js.ml
	cp -rf ../try-alt-ergo/extra/src__util__myUnix.ml ../try-alt-ergo/alt-ergo/lib/util/myUnix.ml
	cp -rf ../try-alt-ergo/extra/src__util__numbers.ml ../try-alt-ergo/alt-ergo/lib/util/numbers.ml
	cp -rf ../try-alt-ergo/extra/src__util__myZip.ml ../try-alt-ergo/alt-ergo/lib/util/myZip.ml
	make depend -C ../try-alt-ergo/alt-ergo
	make byte -C ../try-alt-ergo/alt-ergo
	make try -C ../try-alt-ergo/alt-ergo
	cp ../try-alt-ergo/alt-ergo/try-alt-ergo.js ../try-alt-ergo/html-interface/try-alt-ergo/alt-ergo-mini.js
	firefox ../try-alt-ergo/html-interface/try-mini.html


# TESTS
##########################################################################################

non-regression:$(OPT) fm-simplex
	cp alt-ergo.opt ../non-regression/alt-ergo.opt
	cd ../non-regression &&  ./non-regression.sh
	rm ../non-regression/alt-ergo.opt




# try to make all the targets
##########################################################################################

test-everything:
	make configure
	./configure --prefix=`pwd`/test-make-everything
	rm -rf `pwd`/test-make-everything
	mkdir `pwd`/test-make-everything
	make show-dest-dirs
	make depend
	make all
	make gui
	make alt-ergo.byte
	make opt
	make alt-ergo.opt
	make altgr-ergo.opt
	make byte
	make altgr-ergo.byte
	make fm-simplex
	make fm-simplex-plugin.cma
	make fm-simplex-plugin.cmxs
	make non-regression
	make archi
	make META
	make install-opt
	make install
	make install-byte
	make install-fm-simplex
	make install-gui
	make install-man
	make stripped-arch-binary
#	make try-alt-ergo
#	make public-release # also performs opam-public, which needs public-export



# headers
##############
headers:
	cd ../extra/headers &&  ./headers.sh



# STATIC
##########################################################################################

BIBBYTE_STATIC = zarith.cma nums.cma unix.cma str.cma zip.cma # = BIBBYTE minus dynlink.cma
BIBOPT_STATIC = $(BIBBYTE_STATIC:.cma=.cmxa)

hide-dynlink-in-wrapper-MyDynlink:
	sed -i 's/include Dynlink/include DummyDL/g' lib/util/myDynlink.ml

static: hide-dynlink-in-wrapper-MyDynlink depend $(MAINCMX)
	$(OCAMLOPT) -ccopt -static $(OFLAGS) -o $@ $(BIBOPT_STATIC) $(MAINCMX)
	sed -i 's/include DummyDL/include Dynlink/g' lib/util/myDynlink.ml
	strip $@
	mv static alt-ergo-static-$(VERSION)-$(ARCH)


# PUBLIC RELEASES
##########################################################################################
PUBLIC_VERSION=$(VERSION)
PUBLIC_RELEASE=alt-ergo-$(PUBLIC_VERSION)
PUBLIC_TARGZ=$(PUBLIC_RELEASE).tar.gz
FILES_DEST=../public-release/$(PUBLIC_RELEASE)/$(PUBLIC_RELEASE)

public-release: # test-everything
	rm -rf ../public-release
	mkdir -p $(FILES_DEST)
	cp configure $(FILES_DEST)
	git clean -dfx
	cp ../License.OCamlPro ../OCamlPro-Non-Commercial-License.pdf ../LGPL-License.txt ../Apache-License-2.0.txt $(FILES_DEST)/
	cp ../README.md ../LICENSE.md ../COPYING.md $(FILES_DEST)/
	cp configure.in Makefile.configurable.in Makefile.users Makefile Makefile.developers $(FILES_DEST)/
	cp INSTALL.md opam CHANGES $(FILES_DEST)/
	cp -rf lib tools parsers plugins preludes examples doc $(FILES_DEST)/
	#echo "let version=\"$(PUBLIC_VERSION)\"" >> $(FILES_DEST)/lib/util/version.ml
	echo "let release_commit = \"$(COMMIT_ID)\"" >> $(FILES_DEST)/lib/util/version.ml
	echo "let release_date = \""`LANG=en_US; date`"\"" >> $(FILES_DEST)/lib/util/version.ml
	cd $(FILES_DEST)/.. && tar cfz $(PUBLIC_TARGZ) $(PUBLIC_RELEASE)
	rm -rf $(FILES_DEST)
	autoconf && ./configure

# Targets that work only after the modification in Makefile.XX and/or Alt-Ergo
###############################################################################

bisect-report:
	bisect-report -dump - -html report bisect*.out







 
