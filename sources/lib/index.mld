{1 The Alt-ergo library}

Since version 2.2.0, the alt-ergo library is built and installed.

You can access the {{:AltErgoLib/index.html}list of modules}.

{3 General organisation}

The Alt-Ergo codebase is roughly divided into the following
categories:
- {!section:util}, augmenting the standard library with useful types and fonctions,
  and defining some pervasives structures, such as the global options of
  Alt-Ergo and a bit of configuration.
- {!section:struct}, defining the main structures used throughout Alt-Ergo,
  defining the structures of parsed terms, typed terms, expressions and statements
  used as input for Alt-Ergo
- {!section:frontend}, defining the frontend-related functions in Alt-Ergo,
  including typechecking and transformation from typed terms to expressions.
- {!section:backend} where most of the proof search occurs


{2:struct Structures}

In this category are defined most of the structures used in Alt-Ergo.

First are the Abstract Syntax Trees used in Alt-Ergo. There exists three main
different ASTs: the {!module:AltErgoLib.Parsed} module defines the terms generated
by the native parser of Alt-Ergo, the {!module:AltErgoLib.Typed} module defines
typechecked terms, which are an intermediary used by Alt-Ergo before translating
them into hashconsed expressions as defined in {!module:AltErgoLib.Expr}. The
{!module:AltErgoLib.Ty} module defines the structure used to represent types
(which are common between typed terms and hashconsed expressions). Finally,
the {!module:AltErgoLib.Commands} module defines a notion of commands that can
be sent to the SMT solver.

{!modules:
AltErgoLib.Parsed
AltErgoLib.Ty
AltErgoLib.Typed
AltErgoLib.Expr
AltErgoLib.Commands
}

These modules make use of the following modules to abstract over
variables and symbols:

{!modules:
AltErgoLib.Var
AltErgoLib.Symbols
}

Lastly, the following modules are used by the reasonners in the backend:

{!modules:
AltErgoLib.Explanation
AltErgoLib.Satml_types
AltErgoLib.Fpa_rounding
AltErgoLib.Xliteral
AltErgoLib.Profiling
}


{2:frontend The Frontend}

The frontend provides an easily usable user interface for the Alt-Ergo
solver. It is split into three main parts.

The {!module:AltErgoLib.Frontend} defines a frontend for the core solver,
as a functor parametrized by a SAT solver implementation, and returning a solver
that can process commands as defined by the {!module:AltErgoLib.Commands} module.

The {!module:AltErgoLib.Input} module defines a notion of input method. An input method
is used to transform a string input (typically one or more files), into typed terms
and statements. These typed terms can then be translated into commands using the
{!module:AltErgoLib.Cnf} module.

Finally, the native input method is defined in the {!module:AltErgoLib.Parsed_interface}
and {!module:AltErgoLib.Typechecker} modules.

{!modules:
AltErgoLib.Cnf
AltErgoLib.Frontend
AltErgoLib.Input
AltErgoLib.Parsed_interface
AltErgoLib.Typechecker
}


{2:backend The Backend}

TODO: Add some more explanations.

{!modules:
AltErgoLib.Arrays_rel
AltErgoLib.Theory
AltErgoLib.Ccx
AltErgoLib.Relation
AltErgoLib.Intervals
AltErgoLib.Inequalities
AltErgoLib.IntervalCalculus
AltErgoLib.Records_rel
AltErgoLib.Ite_rel
AltErgoLib.Sig_rel
AltErgoLib.Enum_rel
AltErgoLib.Bitv_rel
AltErgoLib.Uf
AltErgoLib.Use
AltErgoLib.Matching
AltErgoLib.Instances
AltErgoLib.Sat_solver_sig
AltErgoLib.Fun_sat
AltErgoLib.Satml
AltErgoLib.Satml_frontend
AltErgoLib.Satml_frontend_hybrid
AltErgoLib.Sat_solver
AltErgoLib.Matching_types
AltErgoLib.Shostak
AltErgoLib.Ac
AltErgoLib.Arith
AltErgoLib.Arrays
AltErgoLib.Bitv
AltErgoLib.Enum
AltErgoLib.Ite
AltErgoLib.Polynome
AltErgoLib.Records
AltErgoLib.Sig
AltErgoLib.Th_util
}


{2:util Utilities}

Utilities module specific to Alt-Ergo:

{!modules:
AltErgoLib.Config
AltErgoLib.Options
AltErgoLib.Version
}

Stdlib extensions/replacements/wrappers:

{!modules:
AltErgoLib.Util
AltErgoLib.Iheap
AltErgoLib.Emap
AltErgoLib.Hstring
AltErgoLib.Lists
AltErgoLib.MyDynlink
AltErgoLib.Gc_debug
AltErgoLib.Timers
AltErgoLib.Hconsing
AltErgoLib.Vec
AltErgoLib.Loc
AltErgoLib.MyUnix
AltErgoLib.Numbers
AltErgoLib.ZarithNumbers
AltErgoLib.NumsNumbers
AltErgoLib.NumbersInterface
}


{2 Module index}

Unfortunately, odoc doesn't seem to correctly generate the index list
the same way that ocamldoc does, :/
While the index of types and values is not generated yet, you can
always browse the {{:AltErgoLib/index.html}list of modules}.

{!indexlist}

