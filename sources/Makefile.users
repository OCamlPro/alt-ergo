ARCH = $(shell uname -m)

VERSION=$(shell grep "=" lib/util/version.ml | cut -d"=" -f2 | head -n 1)

LOCAL_INC = -I lib/util -I lib/structures -I lib/reasoners \
    -I lib/frontend -I tools/text -I tools/gui \
    -I parsers/why \
    -I parsers/smt2 \
    -I plugins/fm-simplex

INCLUDES = $(NUMLIB) $(ZARITHLIB) $(LABLGTK2LIB)  $(CAMLZIPLIB) $(OCPLIBSIMPLEXLIB) $(LOCAL_INC)
#for coverage # -I /usr/local/lib/ocaml/3.12.1/bisect -pp "camlp4o str.cma /usr/local/lib/ocaml/3.12.1/bisect/bisect_pp.cmo"

# TODO : enable these warnings one by one and fix the code

WARNINGS= -w +A-45-27-4-9-44-32-48-41-6-22

# xxxx: Warning 22: user warnings
# x6 : Warning 60: unused module MyNums. ==> pb with recursive modules

# x623: Warning 27: unused variable binders
# x619: Warning 4 : this pattern-matching is fragile.
# x291: Warning 9 : the following labels are not bound in this record pattern:
# x161: Warning 44: this open statement shadows the value identifier = (which is later used)
# x134: Warning 32: unused value take_max.
# x37 : Warning 48: implicit elimination of optional argument ?kind
# x35 : Warning 41: Other belongs to several types: abstract Sig.lit_origin
# x26 : Warning 6 : label is_le was omitted in the application of this function.


LIGHT_BFLAGS = -annot -absname -bin-annot -short-paths -strict-sequence -g $(WARNINGS) $(INCLUDES)
LIGHT_OFLAGS = -annot -absname -bin-annot -short-paths -strict-sequence -g $(WARNINGS) -inline 100 $(INCLUDES)

BFLAGS = $(LIGHT_BFLAGS) -for-pack AltErgoLib
OFLAGS = $(LIGHT_BFLAGS) -for-pack AltErgoLib

LIBDEPS=num camlzip zarith ocplib-simplex

BIBBYTE = zarith.cma nums.cma unix.cma dynlink.cma str.cma zip.cma ocplibSimplex.cma
# for coverage bisect.cma 

BIBOPT = $(BIBBYTE:.cma=.cmxa)

BIBGUIBYTE = zarith.cma threads.cma lablgtk.cma lablgtksourceview2.cma \
    gtkThread.cmo

BIBGUIOPT = zarith.cmxa threads.cmxa lablgtk.cmxa lablgtksourceview2.cmxa \
    gtkThread.cmx

# main target
#############

NAME = alt-ergo
GUINAME=altgr-ergo
LIBNAME = altErgoLib
BYTE=$(NAME).byte
OPT=$(NAME).opt

all: alt-ergo gui fm-simplex

ifeq ($(OCAMLBEST),opt)
alt-ergo: opt
else
alt-ergo: byte
endif

GENERATED = lib/util/config.ml \
            parsers/why/why_parser.ml \
            parsers/why/why_parser.mli \
            parsers/why/why_lexer.ml \
            parsers/smt2/smtlib_parser.ml \
            parsers/smt2/smtlib_parser.mli \
            parsers/smt2/smtlib_lexer.ml

# bytecode and native-code compilation
######################################

CMO = lib/util/config.cmo \
      lib/util/version.cmo \
      lib/util/emap.cmo \
      lib/util/myUnix.cmo \
      lib/util/myDynlink.cmo \
      lib/util/myZip.cmo \
      lib/util/util.cmo \
      lib/util/lists.cmo \
      lib/util/numsNumbers.cmo \
      lib/util/zarithNumbers.cmo \
      lib/util/numbers.cmo \
      lib/util/options.cmo \
      lib/util/vec.cmo \
      lib/util/iheap.cmo \
      lib/util/timers.cmo \
      lib/util/gc_debug.cmo \
      lib/util/loc.cmo \
      lib/util/hconsing.cmo \
      lib/util/hstring.cmo \
      lib/structures/exception.cmo \
      lib/structures/symbols.cmo \
      lib/structures/ty.cmo \
      lib/structures/parsed.cmo \
      lib/structures/errors.cmo \
      lib/structures/typed.cmo \
      lib/structures/term.cmo \
      lib/structures/fpa_rounding.cmo \
      lib/structures/literal.cmo \
      lib/structures/formula.cmo \
      lib/structures/satml_types.cmo \
      lib/structures/explanation.cmo \
      lib/structures/commands.cmo \
      lib/structures/profiling.cmo \
      lib/reasoners/matching.cmo \
      lib/reasoners/instances.cmo \
      lib/reasoners/polynome.cmo \
      lib/reasoners/ac.cmo \
      lib/reasoners/uf.cmo \
      lib/reasoners/use.cmo \
      lib/reasoners/intervals.cmo \
      lib/reasoners/inequalities.cmo \
      lib/reasoners/intervalCalculus.cmo \
      lib/reasoners/arith.cmo \
      lib/reasoners/records.cmo \
      lib/reasoners/bitv.cmo \
      lib/reasoners/arrays.cmo \
      lib/reasoners/sum.cmo \
      lib/reasoners/ite.cmo \
      lib/reasoners/combine.cmo \
      lib/reasoners/ccx.cmo \
      lib/reasoners/theory.cmo \
      lib/reasoners/sat_solver_sig.cmo \
      lib/reasoners/fun_sat.cmo \
      lib/reasoners/satml.cmo \
      lib/reasoners/satml_frontend.cmo \
      lib/reasoners/sat_solver.cmo \
      lib/frontend/triggers.cmo \
      lib/frontend/cnf.cmo \
      lib/frontend/typechecker.cmo \
      lib/frontend/parsed_interface.cmo \
      lib/frontend/frontend.cmo \
      lib/frontend/parsers.cmo \
      parsers/smt2/smtlib_error.cmo \
      parsers/smt2/smtlib_ty.cmo \
      parsers/smt2/smtlib_typed_env.cmo \
      parsers/smt2/smtlib_typed_logic.cmo \
      parsers/smt2/smtlib_typing.cmo \
      parsers/smt2/smtlib_printer.cmo \
      parsers/smt2/smtlib_translate.cmo

CMOFRONT = parsers/why/why_parser.cmo parsers/why/why_lexer.cmo parsers/smt2/smtlib_parser.cmo parsers/smt2/smtlib_lexer.cmo

# parsers/why/why_parser.cmo parsers/why/why_lexer.cmo

MAINCMO = $(CMO) $(CMOFRONT) lib/frontend/parsers_loader.cmo tools/text/main_text.cmo

ifeq ($(ENABLEGUI),yes)
	GUICMO = $(CMO) $(CMOFRONT) \
                 lib/frontend/parsers_loader.cmo \
                 tools/gui/gui_session.cmo \
                 tools/gui/gui_config.cmo \
                 tools/gui/annoted_ast.cmo \
	         tools/gui/connected_ast.cmo \
                 tools/gui/gui_replay.cmo \
                 tools/gui/main_gui.cmo
else 
	GUICMO = 
endif

CMX = $(CMO:.cmo=.cmx)
CMXFRONT = $(CMOFRONT:.cmo=.cmx)
MAINCMX = $(MAINCMO:.cmo=.cmx)
GUICMX = $(GUICMO:.cmo=.cmx)

byte: $(NAME).byte
opt: $(NAME).opt


#### LIBRARY
$(LIBNAME).cmo: $(CMO) $(CMOFRONT) lib/reasoners/sig.cmi
	$(OCAMLC) $(LIGHT_BFLAGS) -pack -o $(LIBNAME).cmo $^

$(LIBNAME).cmx: $(CMX) $(CMXFRONT) lib/reasoners/sig.cmi
	$(OCAMLOPT) $(LIGHT_OFLAGS)  -pack -o $(LIBNAME).cmx $^


ifeq ($(OCAMLBEST),opt)
$(LIBNAME): $(LIBNAME).cma $(LIBNAME).cmxa $(LIBNAME).cmxs
else
$(LIBNAME): $(LIBNAME).cma
endif

lib: $(LIBNAME)


####
$(NAME).byte: $(MAINCMO) 
	$(OCAMLC) $(BFLAGS) -o $@ $(BIBBYTE) $^

$(NAME).opt: $(MAINCMX)
	$(OCAMLOPT) $(OFLAGS) -o $@ $(BIBOPT) $^

####
$(GUINAME).byte: $(GUICMO)
	$(OCAMLC) $(BFLAGS) -o $(GUINAME).byte $(BIBBYTE) $(BIBGUIBYTE) $^

$(GUINAME).opt: $(GUICMX)
	$(OCAMLOPT) $(OFLAGS) -o $(GUINAME).opt $(BIBOPT) $(BIBGUIOPT) $^

ifeq ($(ENABLEGUI),yes)
gui: $(GUINAME).$(OCAMLBEST)
else
gui:
	@echo "gui compilation skipped (lablgtksourceview not detected)"
endif


.PHONY: gui

lib/util/config.ml: config.status
	@echo "let bindir = \""$(BINDIR)"\"" >> lib/util/config.ml
	@echo "let libdir = \""$(LIBDIR)"\"" >> lib/util/config.ml
	@echo "let pluginsdir = \""$(PLUGINSDIR)"\"" >> lib/util/config.ml
	@echo "let preludesdir = \""$(PRELUDESDIR)"\"" >> lib/util/config.ml
	@echo "let datadir = \""$(DATADIR)"\"" >> lib/util/config.ml
	@echo "let mandir = \""$(MANDIR)"\"" >> lib/util/config.ml

META: config.status
	@echo "description = \"Alt-Ergo: An SMT Solver for Software Verification >> Library files\"" > META
	@echo "version = \""$(VERSION)"\"" >> META
	@echo "archive(byte) = \"$(LIBNAME).cma\"" >> META
	@echo "archive(native) = \"$(LIBNAME).cmxa\"" >> META
	@echo "archive(native, plugin) = \"$(LIBNAME).cmxs\"" >> META
	@echo "archive(byte, plugin) = \"$(LIBNAME).cma\"" >> META
	@echo "requires = \"$(LIBDEPS)\"" >> META
	@echo "exists_if = \"$(LIBNAME).cma\"" >> META


# installation
##############

install-byte: install-man install-preludes
	mkdir -p $(BINDIR)
	cp -f $(NAME).byte $(BINDIR)/$(NAME)$(EXE)

install-opt: install-man install-preludes
	mkdir -p $(BINDIR)
	cp -f $(NAME).opt $(BINDIR)/$(NAME)$(EXE)

install-man:
	mkdir -p $(MANDIR)/man1
	cp -f doc/alt-ergo.1 $(MANDIR)/man1

install-preludes:
	mkdir -p $(PRELUDESDIR)
	cp -f preludes/fpa-theory-2017-01-04-16h00.why $(PRELUDESDIR)/

install-ae: install-man install-preludes
	mkdir -p $(BINDIR)
	cp -f $(NAME).$(OCAMLBEST) $(BINDIR)/$(NAME)$(EXE)

install-gui:
ifeq ($(ENABLEGUI),yes)
	mkdir -p $(BINDIR)
	cp -f $(GUINAME).$(OCAMLBEST) $(BINDIR)/$(GUINAME)$(EXE)
	mkdir -p $(DATADIR)/gtksourceview-2.0/language-specs
	cp -f doc/gtk-lang/alt-ergo.lang $(DATADIR)/gtksourceview-2.0/language-specs/alt-ergo.lang
endif

install-lib: lib META
	OCAMLFIND_DESTDIR=$(BASELIBDIR) \
	  ocamlfind install alt-ergo $(LIBNAME).* META
#mkdir -p $(LIBDIR)
#	cp -f $(LIBNAME).* $(LIBDIR)
#	cp -f META $(LIBDIR)

uninstall-lib:
	ocamlfind remove alt-ergo-lib

install: install-ae install-gui install-fm-simplex install-lib

uninstall: uninstall-lib
	@rm $(BINDIR)/$(NAME)$(EXE)
	@rm $(MANDIR)/man1/alt-ergo.1
	-@rm $(BINDIR)/$(GUINAME)$(EXE)
	-@rm $(DATADIR)/gtksourceview-2.0/language-specs/alt-ergo.lang
	@rm $(PLUGINSDIR)/fm-simplex-plugin.cm*
	@rm $(PRELUDESDIR)/fpa-theory-2017-01-04-16h00.why
#	-@rm $(LIBDIR)/$(LIBNAME).*
#	-@rm $(LIBDIR)/META
#	-@rm $(LIBDIR)

# generic rules
###############

.SUFFIXES: .mli .ml .cmi .cmo .cmx .mll .mly .tex .dvi .ps .html .cma .cmxa .cmxs

.cmo.cma:
	$(OCAMLC) -a $(LIGHT_BFLAGS) -o $@ $^

.cmx.cmxa:
	$(OCAMLOPT) -a $(LIGHT_OFLAGS) -o $@ $^

.cmx.cmxs:
	$(OCAMLOPT) -shared $(LIGHT_OFLAGS) -o $@ $^

.mli.cmi:
	$(OCAMLC) -c $(BFLAGS) $<

.ml.cmo:
	$(OCAMLC) -c $(BFLAGS) $<

.ml.o:
	$(OCAMLOPT) -c $(OFLAGS) $<

.ml.cmx:
	$(OCAMLOPT) -c $(OFLAGS) $<

.mll.ml:
	$(OCAMLLEX) $< > /dev/null

.mly.ml:
	$(MENHIR) -v $< 

.mly.mli:
	$(MENHIR) -v $< 


# clean
#######

clean:
	@for dd in lib/util lib/structures lib/reasoners lib/frontend tools/text tools/gui parsers/why parsers/smt2 plugins/fm-simplex ; do \
	rm -f $$dd/*.cm[ioxtp] $$dd/*.cmti $$dd/*.o $$dd/*~ $$dd/*.annot $$dd/*.owz;\
	rm -f $(GENERATED) $$dd/*.output META $(LIBNAME).*; \
	rm -f $(NAME).byte $(NAME).opt $(GUINAME).opt $(GUINAME).byte *~; \
	done
	@rm -rf *.log archi.dot archi.pdf lib/*~ *.cmxs *.cmos alt-ergo-static* *.cmxs *.cma essentiel essentiel.tar.bz2 alt-ergo-$(VERSION)-$(ARCH)


# depend
########

.depend depend: $(GENERATED)
	$(OCAMLDEP) -slash $(LOCAL_INC) lib/util/*.ml* lib/structures/*.ml* lib/reasoners/*.ml* lib/frontend/*.ml* tools/text/*.ml* \
        tools/gui/*.ml* parsers/why/*.ml* parsers/smt2/*.ml* plugins/fm-simplex/*ml* > .depend

include .depend

#### BUILD & INSTALL additional plugins

FM-SIMPLEX-CMO = plugins/fm-simplex/simplex_cache.cmo \
                 plugins/fm-simplex/simplex.cmo \
                 plugins/fm-simplex/fmSimplexIneqs.cmo

FM-SIMPLEX-CMX = $(FM-SIMPLEX-CMO:.cmo=.cmx)

fm-simplex-plugin.cmxs: $(CMX) $(FM-SIMPLEX-CMX)
	$(if $(QUIET),@echo 'Library $@' &&) $(OCAMLOPT) $(INCLUDES)  -shared -o $@ $(FM-SIMPLEX-CMX)

fm-simplex-plugin.cma: $(CMO) $(FM-SIMPLEX-CMO)
	$(if $(QUIET),@echo 'Library $@' &&) $(OCAMLC) $(INCLUDES)  -a        -o $@ $(FM-SIMPLEX-CMO)

ifeq ($(OCAMLBEST),opt)
fm-simplex: fm-simplex-plugin.cmxs
else
fm-simplex: fm-simplex-plugin.cma
endif

install-fm-simplex: fm-simplex
ifeq ($(OCAMLBEST),opt)
	mkdir -p $(PLUGINSDIR)
	cp -f fm-simplex-plugin.cmxs $(PLUGINSDIR)
else
	mkdir -p $(PLUGINSDIR)
	cp -f fm-simplex-plugin.cma $(PLUGINSDIR)
endif


show-dest-dirs:
	@echo BINDIR      = $(BINDIR)
	@echo LIBDIR      = $(LIBDIR)
	@echo PLUGINSDIR  = $(PLUGINSDIR)
	@echo PRELUDESDIR = $(PRELUDESDIR)
	@echo DATADIR     = $(DATADIR)
	@echo MANDIR      = $(MANDIR)

# Makefile.configurable is rebuilt whenever Makefile.configurable.in 
# or configure.in is modified
######################################################################

configure: configure.in
	autoconf 
	./configure

Makefile.configurable: Makefile.configurable.in configure.in
	./config.status

config.status: configure
	./config.status --recheck

# stripped-arch-binary

stripped-arch-binary: $(OPT)
	cp $(OPT) alt-ergo-$(VERSION)-$(ARCH)
	strip alt-ergo-$(VERSION)-$(ARCH)

opam-deps:
	opam install ocamlfind $(LIBDEPS) lablgtk menhir
