(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

axiom CompatOrderMult :
  (forall x:int. forall y:int. forall z:int. ((x <= y) -> ((0 <= z) ->
  ((x * z) <= (y * z)))))

logic abs : int -> int

axiom abs_def : (forall x:int. ((0 <= x) -> (abs(x) = x)))

axiom abs_def1 : (forall x:int. ((not (0 <= x)) -> (abs(x) = (-x))))

axiom Abs_le : (forall x:int. forall y:int. ((abs(x) <= y) -> ((-y) <= x)))

axiom Abs_le1 : (forall x:int. forall y:int. ((abs(x) <= y) -> (x <= y)))

axiom Abs_le2 :
  (forall x:int. forall y:int. ((((-y) <= x) and (x <= y)) -> (abs(x) <= y)))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (comp_div(x,y) <= x)))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  ((-abs(y)) <  comp_mod(x,y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (comp_mod(x,y) <  abs(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs((comp_div(x,y) * y)) <= abs(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

type 'a set

logic mem : 'a, 'a set -> prop

predicate infix_eqeq(s1: 'a set, s2: 'a set) =
  (forall x:'a. (mem(x, s1) <-> mem(x, s2)))

axiom extensionality :
  (forall s1:'a set. forall s2:'a set. (infix_eqeq(s1, s2) -> (s1 = s2)))

predicate subset(s1: 'a set, s2: 'a set) =
  (forall x:'a. (mem(x, s1) -> mem(x, s2)))

axiom subset_refl : (forall s:'a set. subset(s, s))

axiom subset_trans :
  (forall s1:'a set. forall s2:'a set. forall s3:'a set. (subset(s1, s2) ->
  (subset(s2, s3) -> subset(s1, s3))))

logic empty : 'a set

predicate is_empty(s: 'a set) = (forall x:'a. (not mem(x, s)))

axiom empty_def1 : is_empty((empty : 'a set))

axiom mem_empty : (forall x:'a. (not mem(x, (empty : 'a set))))

axiom mem_empty1 : true

logic add : 'a, 'a set -> 'a set

axiom add_def1 :
  (forall x:'a. forall y:'a.
  (forall s:'a set. (mem(x, add(y, s)) -> ((x = y) or mem(x, s)))))

axiom add_def11 :
  (forall x:'a. forall y:'a.
  (forall s:'a set. (((x = y) or mem(x, s)) -> mem(x, add(y, s)))))

logic remove : 'a, 'a set -> 'a set

axiom remove_def1 :
  (forall x:'a. forall y:'a. forall s:'a set. (mem(x, remove(y, s)) ->
  (not (x = y))))

axiom remove_def11 :
  (forall x:'a. forall y:'a. forall s:'a set. (mem(x, remove(y, s)) -> mem(x,
  s)))

axiom remove_def12 :
  (forall x:'a. forall y:'a. forall s:'a set. (((not (x = y)) and mem(x,
  s)) -> mem(x, remove(y, s))))

axiom add_remove :
  (forall x:'a. forall s:'a set. (mem(x, s) -> (add(x, remove(x, s)) = s)))

axiom remove_add :
  (forall x:'a. forall s:'a set. (remove(x, add(x, s)) = remove(x, s)))

axiom subset_remove : (forall x:'a. forall s:'a set. subset(remove(x, s), s))

logic union : 'a set, 'a set -> 'a set

axiom union_def1 :
  (forall s1:'a set. forall s2:'a set. forall x:'a. (mem(x, union(s1, s2)) ->
  (mem(x, s1) or mem(x, s2))))

axiom union_def11 :
  (forall s1:'a set. forall s2:'a set. forall x:'a. ((mem(x, s1) or mem(x,
  s2)) -> mem(x, union(s1, s2))))

logic inter : 'a set, 'a set -> 'a set

axiom inter_def1 :
  (forall s1:'a set. forall s2:'a set. forall x:'a. (mem(x, inter(s1, s2)) ->
  mem(x, s1)))

axiom inter_def11 :
  (forall s1:'a set. forall s2:'a set. forall x:'a. (mem(x, inter(s1, s2)) ->
  mem(x, s2)))

axiom inter_def12 :
  (forall s1:'a set. forall s2:'a set. forall x:'a. ((mem(x, s1) and mem(x,
  s2)) -> mem(x, inter(s1, s2))))

logic diff : 'a set, 'a set -> 'a set

axiom diff_def1 :
  (forall s1:'a set. forall s2:'a set. forall x:'a. (mem(x, diff(s1, s2)) ->
  mem(x, s1)))

axiom diff_def11 :
  (forall s1:'a set. forall s2:'a set. forall x:'a. (mem(x, diff(s1, s2)) ->
  (not mem(x, s2))))

axiom diff_def12 :
  (forall s1:'a set. forall s2:'a set. forall x:'a. ((mem(x, s1) and
  (not mem(x, s2))) -> mem(x, diff(s1, s2))))

axiom subset_diff :
  (forall s1:'a set. forall s2:'a set. subset(diff(s1, s2), s1))

logic choose : 'a set -> 'a

axiom choose_def :
  (forall s:'a set. ((not is_empty(s)) -> mem(choose(s), s)))

logic all : 'a set

axiom all_def : (forall x:'a. mem(x, (all : 'a set)))

logic b_bool : bool set

axiom mem_b_bool : (forall x:bool. mem(x, b_bool))

type ('a, 'a1) tuple2 = { Tuple2_proj_1 : 'a; Tuple2_proj_2 : 'a1
}

logic relation : 'a2 set, 'b set -> ('a2, 'b) tuple2 set set

axiom mem_relation :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  relation(s, t)) ->
  (forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  f) -> mem(x, s)))))

axiom mem_relation1 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  relation(s, t)) ->
  (forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  f) -> mem(y, t)))))

axiom mem_relation2 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set.
  ((forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
   f) -> (mem(x, s) and mem(y, t)))) ->
  mem(f, relation(s, t))))

logic image : ('a, 'b) tuple2 set, 'a set -> 'b set

axiom mem_image :
  (forall r:('a, 'b) tuple2 set. forall dom:'a set. forall y:'b [mem(y,
  image(r, dom))]. (mem(y, image(r, dom)) ->
  (exists x:'a. (mem(x, dom) and mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y
  }, r)))))

axiom mem_image1 :
  (forall r:('a, 'b) tuple2 set. forall dom:'a set. forall y:'b [mem(y,
  image(r, dom))].
  ((exists x:'a. (mem(x, dom) and mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y
   }, r))) ->
  mem(y, image(r, dom))))

axiom image_union :
  (forall r:('a, 'b) tuple2 set. forall s:'a set. forall t:'a set. (image(r,
  union(s, t)) = union(image(r, s), image(r, t))))

axiom image_add :
  (forall r:('a, 'b) tuple2 set. forall dom:'a set. forall x:'a. (image(r,
  add(x, dom)) = union(image(r, add(x, (empty : 'a set))), image(r, dom))))

logic infix_plmngt : 'a set, 'b set -> ('a, 'b) tuple2 set set

axiom mem_function :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_plmngt(s, t)) ->
  (forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  f) -> mem(x, s)))))

axiom mem_function1 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_plmngt(s, t)) ->
  (forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  f) -> mem(y, t)))))

axiom mem_function2 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_plmngt(s, t)) ->
  (forall x:'a. forall y1:'b. forall y2:'b. ((mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y1 }, f) and mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y2 },
  f)) -> (y1 = y2)))))

axiom mem_function3 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set.
  (((forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
    f) -> (mem(x, s) and mem(y, t)))) and
  (forall x:'a. forall y1:'b. forall y2:'b. ((mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y1 }, f) and mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y2 },
  f)) -> (y1 = y2)))) -> mem(f, infix_plmngt(s, t))))

axiom domain_function :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set.
  forall x:'a. forall y:'b. (mem(f, infix_plmngt(s, t)) -> (mem({
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }, f) -> mem(x, s))))

axiom range_function :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set.
  forall x:'a. forall y:'b. (mem(f, infix_plmngt(s, t)) -> (mem({
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }, f) -> mem(y, t))))

axiom function_extend_range :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set.
  forall u:'b set. (subset(t, u) -> (mem(f, infix_plmngt(s, t)) -> mem(f,
  infix_plmngt(s, u)))))

axiom function_reduce_range :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set.
  forall u:'b set. (subset(u, t) -> (mem(f, infix_plmngt(s, t)) ->
  ((forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
   f) -> mem(y, u))) ->
  mem(f, infix_plmngt(s, u))))))

logic inverse : ('a, 'b) tuple2 set -> ('b, 'a) tuple2 set

axiom Inverse_def :
  (forall r:('a, 'b) tuple2 set.
  (forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = y; Tuple2_proj_2 = x },
  inverse(r)) -> mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, r))))

axiom Inverse_def1 :
  (forall r:('a, 'b) tuple2 set.
  (forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  r) -> mem({ Tuple2_proj_1 = y; Tuple2_proj_2 = x }, inverse(r)))))

logic dom : ('a, 'b) tuple2 set -> 'a set

axiom dom_def :
  (forall r:('a, 'b) tuple2 set.
  (forall x:'a. (mem(x, dom(r)) ->
  (exists y:'b. mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, r)))))

axiom dom_def1 :
  (forall r:('a, 'b) tuple2 set.
  (forall x:'a.
  ((exists y:'b. mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, r)) -> mem(x,
  dom(r)))))

logic ran : ('a, 'b) tuple2 set -> 'b set

axiom ran_def :
  (forall r:('a, 'b) tuple2 set.
  (forall y:'b. (mem(y, ran(r)) ->
  (exists x:'a. mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, r)))))

axiom ran_def1 :
  (forall r:('a, 'b) tuple2 set.
  (forall y:'b.
  ((exists x:'a. mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, r)) -> mem(y,
  ran(r)))))

axiom dom_empty : (dom((empty : ('a, 'b) tuple2 set)) = (empty : 'a set))

axiom dom_add :
  (forall f:('a, 'b) tuple2 set. forall x:'a. forall y:'b. (dom(add({
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }, f)) = add(x, dom(f))))

axiom dom_singleton :
  (forall x:'a. forall y:'b. (dom(add({ Tuple2_proj_1 = x; Tuple2_proj_2 = y
  }, (empty : ('a, 'b) tuple2 set))) = add(x, (empty : 'a set))))

logic infix_mnmngt : 'a set, 'b set -> ('a, 'b) tuple2 set set

axiom mem_total_functions :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_mnmngt(s, t)) -> mem(f, infix_plmngt(s, t))))

axiom mem_total_functions1 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_mnmngt(s, t)) -> (dom(f) = s)))

axiom mem_total_functions2 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. ((mem(f,
  infix_plmngt(s, t)) and (dom(f) = s)) -> mem(f, infix_mnmngt(s, t))))

axiom total_function_is_function :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set [mem(f,
  infix_mnmngt(s, t))]. (mem(f, infix_mnmngt(s, t)) -> mem(f, infix_plmngt(s,
  t))))

axiom singleton_is_partial_function :
  (forall s:'a set. forall t:'b set. forall x:'a. forall y:'b. ((mem(x,
  s) and mem(y, t)) -> mem(add({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  (empty : ('a, 'b) tuple2 set)), infix_plmngt(s, t))))

axiom singleton_is_function :
  (forall x:'a. forall y:'b [add({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  (empty : ('a, 'b) tuple2 set))]. mem(add({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y }, (empty : ('a, 'b) tuple2 set)), infix_mnmngt(add(x,
  (empty : 'a set)), add(y, (empty : 'b set)))))

logic apply : ('a, 'b) tuple2 set, 'a -> 'b

axiom apply_def0 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set.
  forall a1:'a. ((mem(f, infix_plmngt(s, t)) and mem(a1, dom(f))) -> mem({
  Tuple2_proj_1 = a1; Tuple2_proj_2 = apply(f, a1) }, f)))

axiom apply_def1 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set.
  forall a1:'a. ((mem(f, infix_mnmngt(s, t)) and mem(a1, s)) -> mem({
  Tuple2_proj_1 = a1; Tuple2_proj_2 = apply(f, a1) }, f)))

axiom apply_def2 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set.
  forall a1:'a. forall b1:'b. ((mem(f, infix_plmngt(s, t)) and mem({
  Tuple2_proj_1 = a1; Tuple2_proj_2 = b1 }, f)) -> (apply(f, a1) = b1)))

axiom apply_singleton :
  (forall x:'a. forall y:'b. (apply(add({ Tuple2_proj_1 = x; Tuple2_proj_2 =
  y }, (empty : ('a, 'b) tuple2 set)), x) = y))

axiom apply_range :
  (forall x:'a. forall f:('a, 'b) tuple2 set. forall s:'a set.
  forall t:'b set [mem(f, infix_plmngt(s, t)), apply(f, x)]. ((mem(f,
  infix_plmngt(s, t)) and mem(x, dom(f))) -> mem(apply(f, x), t)))

logic semicolon : ('a, 'b) tuple2 set, ('b, 'c) tuple2 set -> ('a,
  'c) tuple2 set

axiom semicolon_def :
  (forall x:'a. forall z:'c. forall p:('a, 'b) tuple2 set. forall q:('b,
  'c) tuple2 set. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = z }, semicolon(p,
  q)) ->
  (exists y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, p) and mem({
  Tuple2_proj_1 = y; Tuple2_proj_2 = z }, q)))))

axiom semicolon_def1 :
  (forall x:'a. forall z:'c. forall p:('a, 'b) tuple2 set. forall q:('b,
  'c) tuple2 set.
  ((exists y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, p) and mem({
   Tuple2_proj_1 = y; Tuple2_proj_2 = z }, q))) ->
  mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = z }, semicolon(p, q))))

logic direct_product : ('a, 'b) tuple2 set, ('a, 'c) tuple2 set -> ('a, ('b,
  'c) tuple2) tuple2 set

axiom direct_product_def :
  (forall e:('t, ('u, 'v) tuple2) tuple2. forall r1:('t, 'u) tuple2 set.
  forall r2:('t, 'v) tuple2 set [mem(e, direct_product(r1, r2))]. (mem(e,
  direct_product(r1, r2)) ->
  (exists x:'t. exists y:'u. exists z:'v. (({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = { Tuple2_proj_1 = y; Tuple2_proj_2 = z } } = e) and (mem({
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }, r1) and mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = z }, r2))))))

axiom direct_product_def1 :
  (forall e:('t, ('u, 'v) tuple2) tuple2. forall r1:('t, 'u) tuple2 set.
  forall r2:('t, 'v) tuple2 set [mem(e, direct_product(r1, r2))].
  ((exists x:'t. exists y:'u. exists z:'v. (({ Tuple2_proj_1 = x;
   Tuple2_proj_2 = { Tuple2_proj_1 = y; Tuple2_proj_2 = z } } = e) and (mem({
   Tuple2_proj_1 = x; Tuple2_proj_2 = y }, r1) and mem({ Tuple2_proj_1 = x;
   Tuple2_proj_2 = z }, r2)))) ->
  mem(e, direct_product(r1, r2))))

logic parallel_product : ('a, 'b) tuple2 set, ('c, 'd) tuple2 set -> (('a,
  'c) tuple2, ('b, 'd) tuple2) tuple2 set

axiom parallel_product_def :
  (forall e:(('t, 'v) tuple2, ('u, 'w) tuple2) tuple2. forall r1:('t,
  'u) tuple2 set. forall r2:('v, 'w) tuple2 set. (mem(e, parallel_product(r1,
  r2)) ->
  (exists x:'t. exists y:'v. exists z:'u. exists a:'w. (({ Tuple2_proj_1 = {
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }; Tuple2_proj_2 = { Tuple2_proj_1 =
  z; Tuple2_proj_2 = a } } = e) and (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 =
  z }, r1) and mem({ Tuple2_proj_1 = y; Tuple2_proj_2 = a }, r2))))))

axiom parallel_product_def1 :
  (forall e:(('t, 'v) tuple2, ('u, 'w) tuple2) tuple2. forall r1:('t,
  'u) tuple2 set. forall r2:('v, 'w) tuple2 set.
  ((exists x:'t. exists y:'v. exists z:'u. exists a:'w. (({ Tuple2_proj_1 = {
   Tuple2_proj_1 = x; Tuple2_proj_2 = y }; Tuple2_proj_2 = { Tuple2_proj_1 =
   z; Tuple2_proj_2 = a } } = e) and (mem({ Tuple2_proj_1 = x;
   Tuple2_proj_2 = z }, r1) and mem({ Tuple2_proj_1 = y; Tuple2_proj_2 = a },
   r2)))) ->
  mem(e, parallel_product(r1, r2))))

axiom semicolon_dom :
  (forall f:('a, 'b) tuple2 set. forall g:('b, 'c) tuple2 set.
  subset(dom(semicolon(f, g)), dom(f)))

axiom semicolon_is_function :
  (forall f:('a, 'b) tuple2 set. forall g:('b, 'c) tuple2 set.
  forall s:'a set. forall t:'b set. forall u:'c set. ((mem(f, infix_plmngt(s,
  t)) and mem(g, infix_plmngt(t, u))) -> mem(semicolon(f, g), infix_plmngt(s,
  u))))

axiom apply_compose :
  (forall x:'a. forall f:('a, 'b) tuple2 set. forall g:('b, 'c) tuple2 set.
  forall s:'a set. forall t:'b set. forall u:'c set. ((mem(f, infix_plmngt(s,
  t)) and (mem(g, infix_plmngt(t, u)) and (mem(x, dom(f)) and mem(apply(f,
  x), dom(g))))) -> (apply(semicolon(f, g), x) = apply(g, apply(f, x)))))

logic infix_gtplgt : 'a set, 'b set -> ('a, 'b) tuple2 set set

axiom mem_partial_injection :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_gtplgt(s, t)) -> mem(f, infix_plmngt(s, t))))

axiom mem_partial_injection1 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_gtplgt(s, t)) -> mem(inverse(f), infix_plmngt(t, s))))

axiom mem_partial_injection2 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. ((mem(f,
  infix_plmngt(s, t)) and mem(inverse(f), infix_plmngt(t, s))) -> mem(f,
  infix_gtplgt(s, t))))

logic infix_gtmngt : 'a set, 'b set -> ('a, 'b) tuple2 set set

axiom mem_total_injection :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_gtmngt(s, t)) -> mem(f, infix_gtplgt(s, t))))

axiom mem_total_injection1 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_gtmngt(s, t)) -> mem(f, infix_mnmngt(s, t))))

axiom mem_total_injection2 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. ((mem(f,
  infix_gtplgt(s, t)) and mem(f, infix_mnmngt(s, t))) -> mem(f,
  infix_gtmngt(s, t))))

axiom mem_total_injection_alt :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_gtmngt(s, t)) -> mem(f, infix_mnmngt(s, t))))

axiom mem_total_injection_alt1 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_gtmngt(s, t)) -> mem(inverse(f), infix_plmngt(t, s))))

axiom mem_total_injection_alt2 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. ((mem(f,
  infix_mnmngt(s, t)) and mem(inverse(f), infix_plmngt(t, s))) -> mem(f,
  infix_gtmngt(s, t))))

axiom injection :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set.
  (forall x:'a. forall y:'a. (mem(f, infix_gtmngt(s, t)) -> (mem(x, s) ->
  (mem(y, s) -> ((apply(f, x) = apply(f, y)) -> (x = y)))))))

logic infix_plmngtgt : 'a set, 'b set -> ('a, 'b) tuple2 set set

axiom mem_partial_surjection :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_plmngtgt(s, t)) -> mem(f, infix_plmngt(s, t))))

axiom mem_partial_surjection1 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_plmngtgt(s, t)) -> (ran(f) = t)))

axiom mem_partial_surjection2 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. ((mem(f,
  infix_plmngt(s, t)) and (ran(f) = t)) -> mem(f, infix_plmngtgt(s, t))))

logic infix_mnmngtgt : 'a set, 'b set -> ('a, 'b) tuple2 set set

axiom mem_total_surjection :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_mnmngtgt(s, t)) -> mem(f, infix_plmngtgt(s, t))))

axiom mem_total_surjection1 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_mnmngtgt(s, t)) -> mem(f, infix_mnmngt(s, t))))

axiom mem_total_surjection2 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. ((mem(f,
  infix_plmngtgt(s, t)) and mem(f, infix_mnmngt(s, t))) -> mem(f,
  infix_mnmngtgt(s, t))))

logic infix_gtplgtgt : 'a set, 'b set -> ('a, 'b) tuple2 set set

axiom mem_partial_bijection :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_gtplgtgt(s, t)) -> mem(f, infix_gtplgt(s, t))))

axiom mem_partial_bijection1 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_gtplgtgt(s, t)) -> mem(f, infix_plmngtgt(s, t))))

axiom mem_partial_bijection2 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. ((mem(f,
  infix_gtplgt(s, t)) and mem(f, infix_plmngtgt(s, t))) -> mem(f,
  infix_gtplgtgt(s, t))))

logic infix_gtmngtgt : 'a set, 'b set -> ('a, 'b) tuple2 set set

axiom mem_total_bijection :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_gtmngtgt(s, t)) -> mem(f, infix_gtmngt(s, t))))

axiom mem_total_bijection1 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_gtmngtgt(s, t)) -> mem(f, infix_mnmngtgt(s, t))))

axiom mem_total_bijection2 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. ((mem(f,
  infix_gtmngt(s, t)) and mem(f, infix_mnmngtgt(s, t))) -> mem(f,
  infix_gtmngtgt(s, t))))

logic to_relation : ('a, 'b set) tuple2 set -> ('a, 'b) tuple2 set

axiom mem_to_relation :
  (forall f:('a, 'b set) tuple2 set. forall x:'a. forall y:'b. (mem({
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }, to_relation(f)) -> mem(x, dom(f))))

axiom mem_to_relation1 :
  (forall f:('a, 'b set) tuple2 set. forall x:'a. forall y:'b. (mem({
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }, to_relation(f)) -> mem(y, apply(f,
  x))))

axiom mem_to_relation2 :
  (forall f:('a, 'b set) tuple2 set. forall x:'a. forall y:'b. ((mem(x,
  dom(f)) and mem(y, apply(f, x))) -> mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y }, to_relation(f))))

logic to_function : ('a, 'b) tuple2 set -> ('a, 'b set) tuple2 set

axiom mem_to_function :
  (forall f:('a, 'b) tuple2 set. forall x:'a. forall y:'b set. (mem({
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }, to_function(f)) -> mem(x, dom(f))))

axiom mem_to_function1 :
  (forall f:('a, 'b) tuple2 set. forall x:'a. forall y:'b set. (mem({
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }, to_function(f)) -> infix_eqeq(y,
  image(f, add(x, (empty : 'a set))))))

axiom mem_to_function2 :
  (forall f:('a, 'b) tuple2 set. forall x:'a. forall y:'b set. ((mem(x,
  dom(f)) and infix_eqeq(y, image(f, add(x, (empty : 'a set))))) -> mem({
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }, to_function(f))))

logic insert_in_front : 'a, (int, 'a) tuple2 set -> (int, 'a) tuple2 set

logic insert_at_tail : (int, 'a) tuple2 set, 'a -> (int, 'a) tuple2 set

logic tail : (int, 'a) tuple2 set -> (int, 'a) tuple2 set

logic last : (int, 'a) tuple2 set -> 'a

logic first : (int, 'a) tuple2 set -> 'a

logic front : (int, 'a) tuple2 set -> (int, 'a) tuple2 set

logic concatenation : (int, 'a) tuple2 set, (int, 'a) tuple2 set -> (int,
  'a) tuple2 set

logic rev : (int, 'a) tuple2 set -> (int, 'a) tuple2 set

logic conc : (int, (int, 'a) tuple2 set) tuple2 set -> (int, 'a) tuple2 set

logic restriction_tail : (int, 'a) tuple2 set, int -> (int, 'a) tuple2 set

logic restriction_head : (int, 'a) tuple2 set, int -> (int, 'a) tuple2 set

logic id : 'a set -> ('a, 'a) tuple2 set

axiom id_def :
  (forall x:'a. forall y:'a. forall s:'a set. (mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y }, id(s)) -> mem(x, s)))

axiom id_def1 :
  (forall x:'a. forall y:'a. forall s:'a set. (mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y }, id(s)) -> (x = y)))

axiom id_def2 :
  (forall x:'a. forall y:'a. forall s:'a set. ((mem(x, s) and (x = y)) ->
  mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, id(s))))

axiom id_dom : (forall s:'a set. (dom(id(s)) = s))

axiom id_ran : (forall s:'a set. (ran(id(s)) = s))

axiom id_fun : (forall s:'a set. mem(id(s), infix_plmngt(s, s)))

axiom id_total_fun : (forall s:'a set. mem(id(s), infix_mnmngt(s, s)))

logic string : (int, int) tuple2 set set

logic integer : int set

axiom mem_integer : (forall x:int. mem(x, integer))

logic natural : int set

axiom mem_natural : (forall x:int. (mem(x, natural) -> (0 <= x)))

axiom mem_natural1 : (forall x:int. ((0 <= x) -> mem(x, natural)))

logic natural1 : int set

axiom mem_natural11 : (forall x:int. (mem(x, natural1) -> (0 <  x)))

axiom mem_natural12 : (forall x:int. ((0 <  x) -> mem(x, natural1)))

logic nat : int set

axiom mem_nat : (forall x:int. (mem(x, nat) -> (0 <= x)))

axiom mem_nat1 : (forall x:int. (mem(x, nat) -> (x <= 2147483647)))

axiom mem_nat2 :
  (forall x:int. (((0 <= x) and (x <= 2147483647)) -> mem(x, nat)))

logic nat1 : int set

axiom mem_nat11 : (forall x:int. (mem(x, nat1) -> (0 <  x)))

axiom mem_nat12 : (forall x:int. (mem(x, nat1) -> (x <= 2147483647)))

axiom mem_nat13 :
  (forall x:int. (((0 <  x) and (x <= 2147483647)) -> mem(x, nat1)))

logic bounded_int : int set

axiom mem_bounded_int :
  (forall x:int. (mem(x, bounded_int) -> ((-2147483647) <= x)))

axiom mem_bounded_int1 :
  (forall x:int. (mem(x, bounded_int) -> (x <= 2147483647)))

axiom mem_bounded_int2 :
  (forall x:int. ((((-2147483647) <= x) and (x <= 2147483647)) -> mem(x,
  bounded_int)))

logic mk : int, int -> int set

axiom mem_interval :
  (forall x:int. forall a:int. forall b:int [mem(x, mk(a, b))]. (mem(x, mk(a,
  b)) -> (a <= x)))

axiom mem_interval1 :
  (forall x:int. forall a:int. forall b:int [mem(x, mk(a, b))]. (mem(x, mk(a,
  b)) -> (x <= b)))

axiom mem_interval2 :
  (forall x:int. forall a:int. forall b:int [mem(x, mk(a, b))].
  (((a <= x) and (x <= b)) -> mem(x, mk(a, b))))

axiom interval_empty :
  (forall a:int. forall b:int. ((b <  a) -> (mk(a, b) = (empty : int set))))

axiom interval_add :
  (forall a:int. forall b:int. ((a <= b) -> (mk(a, b) = add(b, mk(a,
  (b - 1))))))

logic is_finite_subset : 'a set, 'a set, int -> prop

axiom Empty : (forall s:'a set. is_finite_subset((empty : 'a set), s, 0))

axiom Add_mem :
  (forall x:'a. forall s1:'a set. forall s2:'a set. forall c:int.
  (is_finite_subset(s1, s2, c) -> (mem(x, s2) -> (mem(x, s1) ->
  is_finite_subset(add(x, s1), s2, c)))))

axiom Add_notmem :
  (forall x:'a. forall s1:'a set. forall s2:'a set. forall c:int.
  (is_finite_subset(s1, s2, c) -> (mem(x, s2) -> ((not mem(x, s1)) ->
  is_finite_subset(add(x, s1), s2, (c + 1))))))

axiom is_finite_subset_inversion :
  (forall z:'a set. forall z1:'a set. forall z2:int. (is_finite_subset(z, z1,
  z2) -> ((((z = (empty : 'a set)) and (z2 = 0)) or
  (exists x:'a. exists s1:'a set. (is_finite_subset(s1, z1, z2) and (mem(x,
  z1) and (mem(x, s1) and (z = add(x, s1))))))) or
  (exists x:'a. exists s1:'a set. exists c:int. (is_finite_subset(s1, z1,
  c) and (mem(x, z1) and ((not mem(x, s1)) and ((z = add(x, s1)) and
  (z2 = (c + 1))))))))))

axiom finite_interval :
  (forall a:int. forall b:int. ((a <= b) -> is_finite_subset(mk(a, b),
  integer, ((b - a) + 1))))

axiom finite_interval_empty :
  (forall a:int. forall b:int. ((b <  a) -> is_finite_subset(mk(a, b),
  integer, 0)))

logic finite_subsets : 'a set -> 'a set set

axiom finite_subsets_def :
  (forall s:'a set. forall x:'a set. (mem(x, finite_subsets(s)) ->
  (exists c:int. is_finite_subset(x, s, c))))

axiom finite_subsets_def1 :
  (forall s:'a set. forall x:'a set.
  ((exists c:int. is_finite_subset(x, s, c)) -> mem(x, finite_subsets(s))))

axiom finite_Empty :
  (forall s:'a set. mem((empty : 'a set), finite_subsets(s)))

axiom finite_Add :
  (forall x:'a. forall s1:'a set. forall s2:'a set. (mem(s1,
  finite_subsets(s2)) -> (mem(x, s2) -> mem(add(x, s1),
  finite_subsets(s2)))))

axiom finite_Union :
  (forall s1:'a set. forall s2:'a set. forall s3:'a set. (mem(s1,
  finite_subsets(s3)) -> (mem(s2, finite_subsets(s3)) -> mem(union(s1, s2),
  finite_subsets(s3)))))

axiom finite_inversion :
  (forall s1:'a set. forall s2:'a set. (mem(s1, finite_subsets(s2)) ->
  ((s1 = (empty : 'a set)) or
  (exists x:'a. exists s3:'a set. ((s1 = add(x, s3)) and mem(s3,
  finite_subsets(s2)))))))

logic non_empty_finite_subsets : 'a set -> 'a set set

axiom non_empty_finite_subsets_def :
  (forall s:'a set. forall x:'a set. (mem(x, non_empty_finite_subsets(s)) ->
  (exists c:int. (is_finite_subset(x, s, c) and
  (not (x = (empty : 'a set)))))))

axiom non_empty_finite_subsets_def1 :
  (forall s:'a set. forall x:'a set.
  ((exists c:int. (is_finite_subset(x, s, c) and
   (not (x = (empty : 'a set))))) ->
  mem(x, non_empty_finite_subsets(s))))

axiom card_non_neg :
  (forall s:'a set. forall x:'a set. forall c:int. (is_finite_subset(x, s,
  c) -> (0 <= c)))

axiom card_unique :
  (forall s:'a set. forall x:'a set. forall c1:int. forall c2:int.
  (is_finite_subset(x, s, c1) -> (is_finite_subset(x, s, c2) -> (c1 = c2))))

logic card : 'a set -> int

axiom card_def :
  (forall s:'a set. forall x:'a set. forall c:int. (is_finite_subset(x, s,
  c) -> (card(x) = c)))

axiom card_Empty : (card((empty : 'a set)) = 0)

axiom card_Add_not_mem :
  (forall x:'a. forall s1:'a set. forall s2:'a set [mem(s1,
  finite_subsets(s2)), card(add(x, s1))]. (mem(s1, finite_subsets(s2)) ->
  ((not mem(x, s1)) -> (card(add(x, s1)) = (card(s1) + 1)))))

axiom card_Add_mem :
  (forall x:'a. forall s1:'a set. forall s2:'a set [mem(s1,
  finite_subsets(s2)), card(add(x, s1))]. (mem(s1, finite_subsets(s2)) ->
  (mem(x, s1) -> (card(add(x, s1)) = card(s1)))))

axiom card_Union :
  (forall s1:'a set. forall s2:'a set. forall s3:'a set [mem(s1,
  finite_subsets(s3)), mem(s2, finite_subsets(s3)), card(union(s1, s2))].
  (mem(s1, finite_subsets(s3)) -> (mem(s2, finite_subsets(s3)) ->
  (is_empty(inter(s1, s2)) -> (card(union(s1,
  s2)) = (card(s1) + card(s2)))))))

logic infix_lspl : ('a, 'b) tuple2 set, ('a, 'b) tuple2 set -> ('a,
  'b) tuple2 set

axiom overriding_def :
  (forall x:'a. forall y:'b. forall q:('a, 'b) tuple2 set. forall r:('a,
  'b) tuple2 set. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  infix_lspl(q, r)) -> (mem(x, dom(r)) -> mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y }, r))))

axiom overriding_def1 :
  (forall x:'a. forall y:'b. forall q:('a, 'b) tuple2 set. forall r:('a,
  'b) tuple2 set. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  infix_lspl(q, r)) -> ((not mem(x, dom(r))) -> mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y }, q))))

axiom overriding_def2 :
  (forall x:'a. forall y:'b. forall q:('a, 'b) tuple2 set. forall r:('a,
  'b) tuple2 set. (((mem(x, dom(r)) and mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y }, r)) or ((not mem(x, dom(r))) and mem({ Tuple2_proj_1 =
  x; Tuple2_proj_2 = y }, q))) -> mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y
  }, infix_lspl(q, r))))

axiom function_overriding :
  (forall s:'a set. forall t:'b set. forall f:('a, 'b) tuple2 set.
  forall g:('a, 'b) tuple2 set. ((mem(f, infix_plmngt(s, t)) and mem(g,
  infix_plmngt(s, t))) -> mem(infix_lspl(f, g), infix_plmngt(s, t))))

axiom dom_overriding :
  (forall f:('a, 'b) tuple2 set. forall g:('a, 'b) tuple2 set
  [dom(infix_lspl(f, g))]. (dom(infix_lspl(f, g)) = union(dom(f), dom(g))))

axiom apply_overriding_1 :
  (forall s:'a set. forall t:'b set. forall f:('a, 'b) tuple2 set.
  forall g:('a, 'b) tuple2 set. forall x:'a [mem(f, infix_plmngt(s, t)),
  mem(g, infix_plmngt(s, t)), apply(infix_lspl(f, g), x)]. ((mem(f,
  infix_plmngt(s, t)) and mem(g, infix_plmngt(s, t))) -> (mem(x, dom(g)) ->
  (apply(infix_lspl(f, g), x) = apply(g, x)))))

axiom apply_overriding_2 :
  (forall s:'a set. forall t:'b set. forall f:('a, 'b) tuple2 set.
  forall g:('a, 'b) tuple2 set. forall x:'a [mem(f, infix_plmngt(s, t)),
  apply(infix_lspl(f, g), x)| mem(g, infix_plmngt(s, t)), apply(infix_lspl(f,
  g), x)]. ((mem(f, infix_plmngt(s, t)) and mem(g, infix_plmngt(s, t))) ->
  ((not mem(x, dom(g))) -> (mem(x, dom(f)) -> (apply(infix_lspl(f, g),
  x) = apply(f, x))))))

logic power : 'a set -> 'a set set

axiom mem_power :
  (forall x:'a set. forall y:'a set [mem(x, power(y))]. (mem(x, power(y)) ->
  subset(x, y)))

axiom mem_power1 :
  (forall x:'a set. forall y:'a set [mem(x, power(y))]. (subset(x, y) ->
  mem(x, power(y))))

logic non_empty_power : 'a set -> 'a set set

axiom mem_non_empty_power :
  (forall x:'a set. forall y:'a set [mem(x, non_empty_power(y))]. (mem(x,
  non_empty_power(y)) -> subset(x, y)))

axiom mem_non_empty_power1 :
  (forall x:'a set. forall y:'a set [mem(x, non_empty_power(y))]. (mem(x,
  non_empty_power(y)) -> (not (x = (empty : 'a set)))))

axiom mem_non_empty_power2 :
  (forall x:'a set. forall y:'a set [mem(x, non_empty_power(y))]. ((subset(x,
  y) and (not (x = (empty : 'a set)))) -> mem(x, non_empty_power(y))))

logic times : 'a set, 'b set -> ('a, 'b) tuple2 set

axiom times_def :
  (forall a:'a1 set. forall b:'b1 set. forall x:'a1. forall y:'b1 [mem({
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }, times(a, b))]. (mem({
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }, times(a, b)) -> mem(x, a)))

axiom times_def1 :
  (forall a:'a1 set. forall b:'b1 set. forall x:'a1. forall y:'b1 [mem({
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }, times(a, b))]. (mem({
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }, times(a, b)) -> mem(y, b)))

axiom times_def2 :
  (forall a:'a1 set. forall b:'b1 set. forall x:'a1. forall y:'b1 [mem({
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }, times(a, b))]. ((mem(x, a) and
  mem(y, b)) -> mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, times(a, b))))

axiom monotonicity_62a :
  (forall u:'a set. forall s:'a set. forall v:'b set. forall t:'b set.
  ((subset(u, s) and subset(v, t)) -> subset(times(u, v), times(s, t))))

axiom subset_times_function :
  (forall x:'b. forall s:'a set. forall t:'b set. (mem(x, t) -> mem(times(s,
  add(x, (empty : 'b set))), infix_mnmngt(s, t))))

function relations(u: 'a set, v: 'b set) : ('a, 'b) tuple2 set set =
  power(times(u, v))

axiom break_mem_in_add :
  (forall c:('a, 'b) tuple2. forall s:('a, 'b) tuple2 set. forall x:'a.
  forall y:'b. (mem(c, add({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, s)) ->
  ((c = { Tuple2_proj_1 = x; Tuple2_proj_2 = y }) or mem(c, s))))

axiom break_mem_in_add1 :
  (forall c:('a, 'b) tuple2. forall s:('a, 'b) tuple2 set. forall x:'a.
  forall y:'b. (((c = { Tuple2_proj_1 = x; Tuple2_proj_2 = y }) or mem(c,
  s)) -> mem(c, add({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, s))))

axiom break_power_times :
  (forall r:('a, 'b) tuple2 set. forall u:'a set. forall v:'b set. (mem(r,
  power(times(u, v))) -> subset(r, times(u, v))))

axiom break_power_times1 :
  (forall r:('a, 'b) tuple2 set. forall u:'a set. forall v:'b set. (subset(r,
  times(u, v)) -> mem(r, power(times(u, v)))))

axiom subset_of_times :
  (forall r:('a, 'b) tuple2 set. forall u:'a set. forall v:'b set. (subset(r,
  times(u, v)) ->
  (forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  r) -> mem(x, u)))))

axiom subset_of_times1 :
  (forall r:('a, 'b) tuple2 set. forall u:'a set. forall v:'b set. (subset(r,
  times(u, v)) ->
  (forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  r) -> mem(y, v)))))

axiom subset_of_times2 :
  (forall r:('a, 'b) tuple2 set. forall u:'a set. forall v:'b set.
  ((forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
   r) -> (mem(x, u) and mem(y, v)))) ->
  subset(r, times(u, v))))

axiom apply_times :
  (forall s:'a set. forall x:'a. forall y:'b [apply(times(s, add(y,
  (empty : 'b set))), x)]. (mem(x, s) -> (apply(times(s, add(y,
  (empty : 'b set))), x) = y)))

logic power1 : int, int -> int

axiom Power_0 : (forall x:int. (power1(x, 0) = 1))

axiom Power_s :
  (forall x:int. forall n:int. ((0 <= n) -> (power1(x,
  (n + 1)) = (x * power1(x, n)))))

axiom Power_s_alt :
  (forall x:int. forall n:int. ((0 <  n) -> (power1(x, n) = (x * power1(x,
  (n - 1))))))

axiom Power_1 : (forall x:int. (power1(x, 1) = x))

axiom Power_sum :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n + m)) = (power1(x, n) * power1(x, m))))))

axiom Power_mult :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n * m)) = power1(power1(x, n), m)))))

axiom Power_mult2 :
  (forall x:int. forall y:int. forall n:int. ((0 <= n) -> (power1((x * y),
  n) = (power1(x, n) * power1(y, n)))))

axiom Power_non_neg :
  (forall x:int. forall y:int. (((0 <= x) and (0 <= y)) -> (0 <= power1(x,
  y))))

axiom Power_monotonic :
  (forall x:int. forall n:int. forall m:int. (((0 <  x) and ((0 <= n) and
  (n <= m))) -> (power1(x, n) <= power1(x, m))))

logic infix_brgt : ('a, 'b) tuple2 set, 'b set -> ('a, 'b) tuple2 set

axiom range_restriction_def :
  (forall r:('e1, 'e2) tuple2 set. forall f:'e2 set. (subset(f, ran(r)) ->
  (forall x:'e1. forall y:'e2. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  infix_brgt(r, f)) -> mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, r)))))

axiom range_restriction_def1 :
  (forall r:('e1, 'e2) tuple2 set. forall f:'e2 set. (subset(f, ran(r)) ->
  (forall x:'e1. forall y:'e2. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  infix_brgt(r, f)) -> mem(y, f)))))

axiom range_restriction_def2 :
  (forall r:('e1, 'e2) tuple2 set. forall f:'e2 set. (subset(f, ran(r)) ->
  (forall x:'e1. forall y:'e2. ((mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y
  }, r) and mem(y, f)) -> mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  infix_brgt(r, f))))))

logic infix_brgtgt : ('a, 'b) tuple2 set, 'b set -> ('a, 'b) tuple2 set

axiom range_substraction_def :
  (forall r:('e1, 'e2) tuple2 set. forall f:'e2 set. (subset(f, ran(r)) ->
  (forall x:'e1. forall y:'e2. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  infix_brgtgt(r, f)) -> mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, r)))))

axiom range_substraction_def1 :
  (forall r:('e1, 'e2) tuple2 set. forall f:'e2 set. (subset(f, ran(r)) ->
  (forall x:'e1. forall y:'e2. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  infix_brgtgt(r, f)) -> (not mem(y, f))))))

axiom range_substraction_def2 :
  (forall r:('e1, 'e2) tuple2 set. forall f:'e2 set. (subset(f, ran(r)) ->
  (forall x:'e1. forall y:'e2. ((mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y
  }, r) and (not mem(y, f))) -> mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  infix_brgtgt(r, f))))))

logic infix_lsbr : 'a set, ('a, 'b) tuple2 set -> ('a, 'b) tuple2 set

axiom domain_restriction_def :
  (forall r:('e1, 'e2) tuple2 set. forall f:'e1 set. (subset(f, dom(r)) ->
  (forall x:'e1. forall y:'e2. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  infix_lsbr(f, r)) -> mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, r)))))

axiom domain_restriction_def1 :
  (forall r:('e1, 'e2) tuple2 set. forall f:'e1 set. (subset(f, dom(r)) ->
  (forall x:'e1. forall y:'e2. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  infix_lsbr(f, r)) -> mem(x, f)))))

axiom domain_restriction_def2 :
  (forall r:('e1, 'e2) tuple2 set. forall f:'e1 set. (subset(f, dom(r)) ->
  (forall x:'e1. forall y:'e2. ((mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y
  }, r) and mem(x, f)) -> mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  infix_lsbr(f, r))))))

logic infix_lslsbr : 'a set, ('a, 'b) tuple2 set -> ('a, 'b) tuple2 set

axiom domain_substraction_def :
  (forall r:('e1, 'e2) tuple2 set. forall f:'e1 set. (subset(f, dom(r)) ->
  (forall x:'e1. forall y:'e2. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  infix_lslsbr(f, r)) -> mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, r)))))

axiom domain_substraction_def1 :
  (forall r:('e1, 'e2) tuple2 set. forall f:'e1 set. (subset(f, dom(r)) ->
  (forall x:'e1. forall y:'e2. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  infix_lslsbr(f, r)) -> (not mem(x, f))))))

axiom domain_substraction_def2 :
  (forall r:('e1, 'e2) tuple2 set. forall f:'e1 set. (subset(f, dom(r)) ->
  (forall x:'e1. forall y:'e2. ((mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y
  }, r) and (not mem(x, f))) -> mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  infix_lslsbr(f, r))))))

function seq_length(n: int, s: 'a set) : (int, 'a) tuple2 set set =
  infix_mnmngt(mk(1, n), s)

axiom length_uniq :
  (forall n1:int. forall n2:int. forall s1:'a set. forall s2:'a set.
  forall r:(int, 'a) tuple2 set. (((0 <= n1) and mem(r, seq_length(n1,
  s1))) -> (((0 <= n2) and mem(r, seq_length(n2, s2))) -> (n1 = n2))))

logic size : (int, 'a) tuple2 set -> int

axiom size_def :
  (forall n:int. forall s:'a set. forall r:(int, 'a) tuple2 set.
  (((0 <= n) and mem(r, seq_length(n, s))) -> (size(r) = n)))

logic seq : 'a set -> (int, 'a) tuple2 set set

axiom seq_def :
  (forall s:'a set. forall r:(int, 'a) tuple2 set. (mem(r, seq(s)) ->
  (0 <= size(r))))

axiom seq_def1 :
  (forall s:'a set. forall r:(int, 'a) tuple2 set. (mem(r, seq(s)) -> mem(r,
  seq_length(size(r), s))))

axiom seq_def2 :
  (forall s:'a set. forall r:(int, 'a) tuple2 set. (((0 <= size(r)) and
  mem(r, seq_length(size(r), s))) -> mem(r, seq(s))))

axiom seq_as_total_function :
  (forall s:'a set. forall r:(int, 'a) tuple2 set. (mem(r, seq(s)) -> mem(r,
  infix_mnmngt(mk(1, size(r)), s))))

logic seq1 : 'a set -> (int, 'a) tuple2 set set

axiom seq1_def :
  (forall s:'a set. forall r:(int, 'a) tuple2 set. (mem(r, seq1(s)) ->
  (0 <  size(r))))

axiom seq1_def1 :
  (forall s:'a set. forall r:(int, 'a) tuple2 set. (mem(r, seq1(s)) -> mem(r,
  seq(s))))

axiom seq1_def2 :
  (forall s:'a set. forall r:(int, 'a) tuple2 set. (((0 <  size(r)) and
  mem(r, seq(s))) -> mem(r, seq1(s))))

logic iseq : 'a set -> (int, 'a) tuple2 set set

logic iseq1 : 'a set -> (int, 'a) tuple2 set set

logic perm : 'a set -> (int, 'a) tuple2 set set

logic infix_slbr : (int, 'a) tuple2 set, int -> (int, 'a) tuple2 set

axiom head_restriction_def :
  (forall s:(int, 'a) tuple2 set. forall n:int. (mem(n, mk(0, size(s))) ->
  (forall i:int. forall x:'a. (mem({ Tuple2_proj_1 = i; Tuple2_proj_2 = x },
  infix_slbr(s, n)) -> mem({ Tuple2_proj_1 = i; Tuple2_proj_2 = x },
  infix_lsbr(mk(1, n), s))))))

axiom head_restriction_def1 :
  (forall s:(int, 'a) tuple2 set. forall n:int. (mem(n, mk(0, size(s))) ->
  (forall i:int. forall x:'a. (mem({ Tuple2_proj_1 = i; Tuple2_proj_2 = x },
  infix_lsbr(mk(1, n), s)) -> mem({ Tuple2_proj_1 = i; Tuple2_proj_2 = x },
  infix_slbr(s, n))))))

logic infix_brsl : (int, 'a) tuple2 set, int -> (int, 'a) tuple2 set

axiom tail_restriction_def :
  (forall s:(int, 'a) tuple2 set. forall n:int. (mem(n, mk(0, size(s))) ->
  (forall i:int. forall x:'a. (mem({ Tuple2_proj_1 = i; Tuple2_proj_2 = x },
  infix_brsl(s, n)) -> mem({ Tuple2_proj_1 = (i + n); Tuple2_proj_2 = x },
  s)))))

axiom tail_restriction_def1 :
  (forall s:(int, 'a) tuple2 set. forall n:int. (mem(n, mk(0, size(s))) ->
  (forall i:int. forall x:'a. (mem({ Tuple2_proj_1 = (i + n); Tuple2_proj_2 =
  x }, s) -> mem({ Tuple2_proj_1 = i; Tuple2_proj_2 = x }, infix_brsl(s,
  n))))))

logic min : int set -> int

axiom min_belongs :
  (forall s:int set. (subset(s, natural) -> ((not (s = (empty : int set))) ->
  mem(min(s), s))))

axiom min_is_min :
  (forall s:int set. (subset(s, natural) -> ((not (s = (empty : int set))) ->
  (forall x:int. (mem(x, s) -> (min(s) <= x))))))

logic max : int set -> int

axiom max_belongs :
  (forall s:int set. (mem(s, non_empty_finite_subsets(natural)) ->
  mem(max(s), s)))

axiom max_is_max :
  (forall s:int set. (mem(s, non_empty_finite_subsets(natural)) ->
  (forall x:int. (mem(x, s) -> (x <= max(s))))))

logic iterate : ('a, 'a) tuple2 set, int -> ('a, 'a) tuple2 set

axiom iterate_zero :
  (forall r:('a, 'a) tuple2 set. (iterate(r, 0) = id(dom(r))))

axiom iterate_succ :
  (forall r:('a, 'a) tuple2 set. forall n:int. ((0 <  n) -> (iterate(r,
  n) = semicolon(r, iterate(r, (n - 1))))))

logic closure : ('a, 'a) tuple2 set -> ('a, 'a) tuple2 set

axiom closure_def :
  (forall r:('a, 'a) tuple2 set. forall u:('a, 'a) tuple2. (mem(u,
  closure(r)) -> (exists x:int. ((0 <= x) and mem(u, iterate(r, x))))))

axiom closure_def1 :
  (forall r:('a, 'a) tuple2 set. forall u:('a, 'a) tuple2.
  ((exists x:int. ((0 <= x) and mem(u, iterate(r, x)))) -> mem(u,
  closure(r))))

logic closure1 : ('a, 'a) tuple2 set -> ('a, 'a) tuple2 set

axiom closure1_def :
  (forall r:('a, 'a) tuple2 set. forall u:('a, 'a) tuple2. (mem(u,
  closure1(r)) -> (exists x:int. ((0 <  x) and mem(u, iterate(r, x))))))

axiom closure1_def1 :
  (forall r:('a, 'a) tuple2 set. forall u:('a, 'a) tuple2.
  ((exists x:int. ((0 <  x) and mem(u, iterate(r, x)))) -> mem(u,
  closure1(r))))

logic prj1 : 'a set, 'b set -> (('a, 'b) tuple2, 'a) tuple2 set

axiom prj1_def :
  (forall a:'a1 set. forall b:'b1 set. forall x:'a1. forall y:'b1. ((mem(x,
  a) and mem(y, b)) -> (apply(prj1(a,b),
  { Tuple2_proj_1 = x; Tuple2_proj_2 = y }) = x)))

logic prj2 : 'a set, 'b set -> (('a, 'b) tuple2, 'b) tuple2 set

axiom prj2_def :
  (forall a:'a1 set. forall b:'b1 set. forall x:'a1. forall y:'b1. ((mem(x,
  a) and mem(y, b)) -> (apply(prj2(a,b),
  { Tuple2_proj_1 = x; Tuple2_proj_2 = y }) = y)))

logic generalized_union : 'a set set -> 'a set

axiom generalized_union_def :
  (forall s:'a set set. forall x:'a. (mem(x, generalized_union(s)) ->
  (exists y:'a set. (mem(x, y) and mem(y, s)))))

axiom generalized_union_def1 :
  (forall s:'a set set. forall x:'a.
  ((exists y:'a set. (mem(x, y) and mem(y, s))) -> mem(x,
  generalized_union(s))))

type ('a,
'b) func

logic infix_at : ('a, 'b) func, 'a -> 'b

logic comprehension : ('a, bool) func -> 'a set

axiom comprehension_def :
  (forall p:('a, bool) func.
  (forall x:'a. (mem(x, comprehension(p)) -> (infix_at(p, x) = true))))

axiom comprehension_def1 :
  (forall p:('a, bool) func.
  (forall x:'a. ((infix_at(p, x) = true) -> mem(x, comprehension(p)))))

logic fc : ('a, bool) func, 'a set -> ('a, bool) func

axiom fc_def :
  (forall p:('a, bool) func. forall u:'a set. forall x:'a. ((infix_at(fc(p,
  u), x) = true) -> (infix_at(p, x) = true)))

axiom fc_def1 :
  (forall p:('a, bool) func. forall u:'a set. forall x:'a. ((infix_at(fc(p,
  u), x) = true) -> mem(x, u)))

axiom fc_def2 :
  (forall p:('a, bool) func. forall u:'a set. forall x:'a. (((infix_at(p,
  x) = true) and mem(x, u)) -> (infix_at(fc(p, u), x) = true)))

function filter(p: ('a, bool) func, u: 'a set) : 'a set = comprehension(fc(p,
  u))

logic fc1 : ('a, 'b) func, 'a set -> ('b, bool) func

axiom fc_def3 :
  (forall f:('a, 'b) func. forall u:'a set. forall y:'b. ((infix_at(fc1(f,
  u), y) = true) -> (exists x:'a. (mem(x, u) and (y = infix_at(f, x))))))

axiom fc_def4 :
  (forall f:('a, 'b) func. forall u:'a set. forall y:'b.
  ((exists x:'a. (mem(x, u) and (y = infix_at(f, x)))) -> (infix_at(fc1(f,
  u), y) = true)))

function map(f: ('a, 'b) func, u: 'a set) : 'b set = comprehension(fc1(f, u))

axiom map_def :
  (forall f:('a, 'b) func. forall u:'a set.
  (forall x:'a. (mem(x, u) -> mem(infix_at(f, x), map(f, u)))))

logic sum : int set -> int

axiom sum_def0 : (sum((empty : int set)) = 0)

axiom sum_def1 :
  (forall s:int set. forall x:int. (mem(x, s) -> (sum(s) = (x + sum(remove(x,
  s))))))

function sigma(p: ('a, bool) func, f: ('a, int) func) : int = sum(map(f,
  comprehension(p)))
